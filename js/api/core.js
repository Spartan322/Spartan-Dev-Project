// Generated by CoffeeScript 1.10.0
"use strict";
var Companies, SDP;

SDP = {};


/*
Enums: enumerable objects
 */

SDP.Enum = {};

SDP.Enum.ResearchCategory = SDP.Util.Enum.Generate('ResearchCategory', 'Engine', 'Gameplay', 'Story/Quests', 'Dialogs', 'Level Design', 'AI', 'World Design', 'Graphic', 'Sound');

SDP.Enum.Audience = SDP.Util.Enum.Generate('Audience', 'young', 'everyone', 'mature');

SDP.Enum.Genre = SDP.Util.Enum.Generate('Genre', 'Action', 'Adventure', 'RPG', 'Simulation', 'Strategy', 'Casual');


/*
Addition Functions: adds basic game objects
 */

SDP.GDT = {};

SDP.GDT.addResearchItem = function(item) {
  if ((SDP.GDT.Research != null) && item instanceof SDP.GDT.Research) {
    item = item.toInput();
  }
  if (item.v != null) {
    GDT.addResearchItem(item);
  } else {
    if (Checks.checkPropertiesPresent(item, ['id', 'name', 'category', 'categoryDisplayName']) && Checks.checkUniqueness(item, 'id', Research.getAllItems())) {
      Research.engineItems.push(item);
    }
  }
};

SDP.GDT.addPlatform = function(item) {
  var event, j, len, point, ref;
  if ((SDP.GDT.Platform != null) && item instanceof SDP.GDT.Platform) {
    item = item.toInput();
  }
  if (item.iconUri != null) {
    GDT.addPlatform(item);
  } else {
    if (Checks.checkPropertiesPresent(item, ['id', 'name', 'company', 'startAmount', 'unitsSold', 'licencePrize', 'published', 'platformRetireDate', 'developmentCosts', 'genreWeightings', 'audienceWeightings', 'techLevel', 'baseIconUri', 'imageDates']) && Checks.checkUniqueness(item, 'id', Platforms.allPlatforms) && Checks.checkAudienceWeightings(item.audienceWeightings) && Checks.checkGenreWeightings(item.genreWeightings) && Checks.checkDate(item.published) && Checks.checkDate(item.platformRetireDate)) {
      if (item.marketPoints) {
        ref = item.marketPoints;
        for (j = 0, len = ref.length; j < len; j++) {
          point = ref[j];
          if (!Checks.checkDate(point.date)) {
            return;
          }
        }
      }
      if (Checks.checkUniqueness(item.name, 'name', Companies.getAllCompanies())) {
        SDP.GDT.addCompany(item.name).addPlatform(item);
      } else {
        Platforms.allPlatforms.push(item);
      }
      if (item.events) {
        for (event in item.events) {
          GDT.addEvent(event)(!(event instanceof SDP.GDT.Event) ? event.add() : void 0);
        }
      }
    }
  }
};

SDP.GDT.addTopic = function(item) {
  if ((SDP.GDT.Topic != null) && item instanceof SDP.GDT.Topic) {
    item = item.toInput();
  }
  if ((SDP.GDT.Weight != null) && item.genreWeightings instanceof SDP.GDT.Weight) {
    item.genreWeightings = item.genreWeightings.toGenre().get();
  }
  if ((SDP.GDT.Weight != null) && item.audienceWeightings instanceof SDP.GDT.Weight) {
    item.audienceWeightings = item.audienceWeightings.toAudience().get();
  }
  return GDT.addTopic(item);
};

SDP.GDT.addResearchProject = function(item) {
  if ((SDP.GDT.ResearchProject != null) && item instanceof SDP.GDT.ResearchProject) {
    item = item.toInput();
  }
  if (item.canResearch == null) {
    item.canResearch = (function(company) {
      return true;
    });
  }
  if (Checks.checkPropertiesPresent(item, ['id', 'name', 'pointsCost', 'iconUri', 'description', 'targetZone']) && Checks.checkUniqueness(item, 'id', Research.bigProjects)) {
    Research.bigProjects.push(item);
  }
};

SDP.GDT.triggerNotification = function(item) {
  var ref, ref1, ref2;
  if (item.header == null) {
    item.header = '?';
  }
  if (item.text == null) {
    item.text = '?';
  }
  if (!item instanceof Notification) {
    item = new Notification({
      header: (ref = item.header) != null ? ref : '?',
      text: (ref1 = item.text) != null ? ref1 : '?',
      buttonText: item.buttonText,
      weeksUntilFired: item.weeksUntilFired,
      image: item.image,
      options: item.options.slice(0, 3),
      sourceId: item.sourceId
    });
  }
  if ((typeof GameManager !== "undefined" && GameManager !== null ? (ref2 = GameManager.company) != null ? ref2.notifications : void 0 : void 0) != null) {
    return GameManager.company.notifications.push(item);
  } else {
    return SDP.GDT.Internal.notificationsToTrigger.push(item);
  }
};

SDP.GDT.addEvent = function(item) {
  if (item.getEvent != null) {
    item = item.getEvent();
  }
  if (item.event != null) {
    item = item.event;
  }
  if ((SDP.GDT.Event != null) && item instanceof SDP.GDT.Event) {
    item = item.toInput();
  }
  if ((SDP.GDT.Notification != null) && item.notification instanceof SDP.GDT.Notification) {
    item.notification = item.notification.toInput();
  }
  return GDT.addEvent(item);
};

SDP.GDT.addCompany = function(item) {
  if (item.constructor === String) {
    item = Companies.createCompany(item);
  }
  if ((SDP.GDT.Company != null) && item instanceof SDP.GDT.Company) {
    item = item.toInput();
  }
  item.sort = function() {
    return item.platforms.sort(function(a, b) {
      return General.getWeekFromDateString(a.published) - General.getWeekFromDateString(b.published);
    });
  };
  item.addPlatform = function(platform) {
    platform.company = item.name;
    SDP.GDT.addPlatform(platform);
    item.platforms.push(platform);
    item.sort();
    return platform;
  };
  if (Checks.checkPropertiesPresent(item, ['id', 'name']) && Checks.checkUniqueness(item, 'id', Companies.getAllCompanies())) {
    Companies.moddedCompanies.push(item);
  }
  return item;
};


/*
GDT Utility: Functions which are for utility of GDT
 */

SDP.GDT.getOverridePositions = function(genre, category) {
  var c, ci, g, i, j, k, len, len1, ref, ref1;
  genre = genre.replace(/\s/g, "");
  category = category.replace(/\s/g, "");
  ref = SDP.Enum.Genre.toArray();
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    g = ref[i];
    if (genre === g) {
      ref1 = SDP.Enum.ResearchCategory.toArray();
      for (ci = k = 0, len1 = ref1.length; k < len1; ci = ++k) {
        c = ref1[ci];
        if (c === category) {
          return [i, ci];
        }
      }
      break;
    }
  }
  return void 0;
};


/*
Adds company tracking system
 */

Companies = {};

Companies.createCompany = function(item) {
  var p;
  if (item.constructor === String) {
    item = {
      name: item
    };
  }
  if ((item.id == null) && (item.name != null)) {
    item.id = name.replace(/\s/g, "");
  }
  item.platforms = [];
  for (p in Platforms.allPlatforms) {
    if (p.company === item.name) {
      item.platforms.push(p);
    }
  }
  item.sort = function() {
    return item.platforms.sort(function(a, b) {
      return General.getWeekFromDateString(a.published) - General.getWeekFromDateString(b.published);
    });
  };
  item.addPlatform = function(platform) {
    if (item.platforms.find(function(val) {
      return platform.id === val.id;
    }) != null) {
      return;
    }
    platform.company = item.name;
    SDP.GDT.addPlatform(platform);
    item.platforms.push(platform);
    item.sort();
    return platform;
  };
  item.sort();
  return item;
};

Companies.createVanillaCompany = function(item) {
  Companies.createCompany(item);
  item.isVanilla = true;
  return item;
};

Companies.vanillaCompanies = [Companies.createVanillaCompany("Micronoft"), Companies.createVanillaCompany("Grapple"), Companies.createVanillaCompany("Govodore"), Companies.createVanillaCompany("Ninvento"), Companies.createVanillaCompany("Vena"), Companies.createVanillaCompany("Vonny"), Companies.createVanillaCompany("KickIT")];

Companies.moddedCompanies = [];

Companies.getAllCompanies = function() {
  var c, comp;
  c = Companies.vanillaCompanies.filter(function(val) {
    return val.id != null;
  });
  c.addRange(Companies.moddedCompanies.filter(function(val) {
    return val.id != null;
  }));
  for (comp in c) {
    comp.sort = function() {
      return comp.platforms.sort(function(a, b) {
        return General.getWeekFromDateString(a.published) - General.getWeekFromDateString(b.published);
      });
    };
    comp.sort();
  }
  c.sort(function(a, b) {
    return General.getWeekFromDateString(a.platforms[0].published) - General.getWeekFromDateString(b.platforms[0].published);
  });
  return c;
};

Companies.getAvailableCompanies = function(company) {
  var week;
  week = Math.floor(company.currentWeek);
  return Companies.getAllCompanies().filter(function(val) {
    return General.getWeekFromDateString(val.platforms[0].published) <= week;
  });
};
