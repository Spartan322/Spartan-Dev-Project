// Generated by CoffeeScript 1.10.0

/*
Functions which require patches
 */
var Game, JobApplicants,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SDP.GDT.addTraining = function(item) {
  if ((SDP.GDT.Training != null) && item instanceof SDP.GDT.Training) {
    item = item.toInput();
  }
  if (item.pointsCost == null) {
    item.pointsCost = 0;
  }
  if (Checks.checkPropertiesPresent(item, ['id', 'name', 'pointsCost', 'duration', 'category', 'categoryDisplayName']) && Checks.checkUniqueness(item, 'id', Training.getAllTraining())) {
    Training.moddedTraining(item);
  }
};

SDP.GDT.addPublisher = function(item) {
  if ((SDP.GDT.Publisher != null) && item instanceof SDP.GDT.Publisher) {
    item = item.toInput();
  }
  if (!Checks.checkUniqueness(item, 'id', Companies.getAllCompanies())) {
    return;
  }
  if (Checks.checkPropertiesPresent(item, ['id', 'name']) && Checks.checkUniqueness(item, 'id', ProjectContracts.getAllPublishers())) {
    ProjectContracts.moddedPublishers.push(item);
  }
};

SDP.GDT.addContract = function(item) {
  if ((SDP.GDT.Contract != null) && item instanceof SDP.GDT.Contract) {
    item = item.toInput();
  }
  if (Checks.checkPropertiesPresent(item, ['name', 'description', 'dF', 'tF'])) {
    ProjectContracts.moddedContracts.push(item);
  }
};

SDP.GDT.addReviewer = function(item) {
  if (item.constructor === String) {
    item = {
      id: item.replace(/\s/g, ""),
      name: item
    };
  }
  if ((SDP.GDT.Reviewer != null) && item instanceof SDP.GDT.Reviewer) {
    item = item.toInput();
  }
  if (Checks.checkPropertiesPresent(item, ['id', 'name']) && Checks.checkUniqueness(item, 'id', Reviews.getAllReviewers())) {
    Reviews.moddedReviewers.push(item);
  }
};

SDP.GDT.addReviewMessage = function(item) {
  if (item.constructor === String) {
    item = {
      message: item,
      isRandom: true
    };
  }
  if (item.message || item.getMessage) {
    Reviews.moddedMessages.push(item);
  }
};

SDP.GDT.addApplicantFunctor = function(item) {
  if (Checks.checkPropertiesPresent(item, ['apply', 'forMale']) && typeof apply === "function") {
    JobApplicants.moddedAlgorithims.push(item);
  }
};

SDP.GDT.addFamousFunctor = function(item) {
  if (Checks.checkPropertiesPresent(item, ['apply', 'forMale']) && typeof apply === "function") {
    JobApplicants.moddedFamous.push(item);
  }
};


/*
 *
 * Patches: improves game modularbility and performance and kills bugs
 * Should force patches on mod load
 *
 */

SDP.GDT.Internal = {};

SDP.GDT.Internal.notificationsToTrigger = [];


/*
Triggers all notifications in the case they couldn't be triggered before (ie: before the GameManager.company.notification existed
 */

GDT.on(GDT.eventKeys.saves.loaded, function() {
  var i, j, len, ref;
  ref = SDP.GDT.Internal.notificationsToTrigger;
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    GameManager.company.notifications.push(i);
  }
  return SDP.GDT.Internal.notificationsToTrigger = [];
});

GDT.on(GDT.eventKeys.saves.newGame, function() {
  var i, j, len, ref;
  ref = SDP.GDT.Internal.notificationsToTrigger;
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    GameManager.company.notifications.push(i);
  }
  return SDP.GDT.Internal.notificationsToTrigger = [];
});


/*
Allows new platforms to incorporate different images based on the date
 */

Platforms._oldGetPlatformImage = Platforms.getPlatformImage;

Platforms.getPlatformImage = function(platform, week) {
  var baseUri, date, i, image, j, len, ref;
  if (platform.id === 'PC') {
    return Platforms._oldGetPlatformImage(platform, week);
  }
  if ((platform.imageDates == null) || (platform.baseIconUri == null)) {
    return platform.iconUri;
  }
  baseUri = platform.baseIconUri;
  image = null;
  if (week && platform.imageDates.constructor === Array) {
    ref = platform.imageDates;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      date = ref[i];
      if (General.getWeekFromDateString(date) <= week && i !== 0) {
        image = "{0}/{1}-{2}.png".format(baseUri, platform.id, String(i + 1));
      }
    }
  }
  if (image == null) {
    image = "{0}/{1}.png".format(baseUri, platform.id);
  }
  return image;
};


/*
Forces getAllTraining to include modded training
 */

Training._oldGetAllTraining = Training.getAllTraining;

Training.moddedTraining = [];

Training.getAllTraining = function() {
  var j, len, modT, ref, trainings;
  trainings = Training._oldGetAllTraining();
  ref = Training.moddedTraining;
  for (j = 0, len = ref.length; j < len; j++) {
    modT = ref[j];
    if ((modT.id != null) && modT.isTraining) {
      trainings.push(modT);
    }
  }
};


/*
Adds features to the publisher contracts which determine how they act
Also allows low chance for platform company to randomly give a publisher contract
 */

ProjectContracts.createPublisher = function(item, id) {
  if (item.constructor === String) {
    item = {
      name: item
    };
  }
  if (id != null) {
    item.id = id;
  }
  if ((item.id == null) && (item.name != null)) {
    item.id = name.replace(/\s/g, "");
  }
  return item;
};

ProjectContracts.vanillaPublishers = [ProjectContracts.createPublisher("Active Visionaries"), ProjectContracts.createPublisher("Electronic Mass Productions", "ea"), ProjectContracts.createPublisher("Rockville Softworks"), ProjectContracts.createPublisher("Blue Bit Games"), ProjectContracts.createPublisher("CapeCom"), ProjectContracts.createPublisher("Codemeisters"), ProjectContracts.createPublisher("Deep Platinum"), ProjectContracts.createPublisher("Infro Games"), ProjectContracts.createPublisher("LoWood Productions"), ProjectContracts.createPublisher("TGQ"), ProjectContracts.createPublisher("\u00dcberSoft")];

ProjectContracts.moddedPublishers = [];

ProjectContracts.publisherContracts.__oldGetContract = ProjectContracts.publisherContracts.getContract;

ProjectContracts.getAllPublishers = function() {
  var results;
  results = ProjectContracts.vanillaPublishers.filter(function(val) {
    return val.id != null;
  });
  results.push(ProjectContracts.moddedPublishers.filter(function(val) {
    return val.id != null;
  }));
  return results;
};

ProjectContracts.getAvailablePublishers = function(company) {
  var week;
  week = Math.floor(company.currentWeek);
  return ProjectContracts.getAllPublishers().filter(function(val) {
    return ((val.startWeek == null) || week > General.getWeekFromDateString(val.startWeek, val.ignoreGameLengthModifier)) && ((val.retireWeek == null) || val.retireWeek === '260/12/4' || week < General.getWeekFromDateString(val.retireWeek, val.ignoreGameLengthModifier));
  });
};

ProjectContracts.getPublishingCompanies = function(company) {
  var c;
  c = Companies.getAllCompanies(company).filter(function(val) {
    return (val.notPublisher != null) && !val.notPublisher;
  });
  c.forEach(function(val) {
    return val.isCompany = true;
  });
  return c;
};

SDP.GDT.Internal.getGenericContractsSettings = function(company, type) {
  var key, settings;
  key = "contracts" + type;
  settings = company.flags[key];
  if (!settings) {
    settings = {
      id: key
    };
    company.flags[key] = settings;
  }
  return settings;
};

SDP.GDT.Internal.generatePublisherContracts = function(company, settings, maxNumber) {
  var allPlatforms, audience, audiences, basePay, contracts, count, diffculty, excludes, genre, i, j, lastGame, minScore, name, pay, penalty, platform, platforms, pubName, publisher, publishers, random, ref, researchedTopics, royaltyRate, seed, size, sizeBasePay, sizes, topic, topics;
  contracts = [];
  seed = settings.seed;
  random = new MersenneTwister(SDP.Util.getSeed(settings));
  if (settings.seed !== seed) {
    settings.topic = void 0;
    settings.researchedTopics = void 0;
    settings.excludes = void 0;
    settings.platforms = void 0;
  }
  if (!settings.topics || !settings.researchedTopics || !settings.platforms) {
    topics = company.topics.slice();
    topics.addRange(General.getTopicsAvailableForResearch(company));
    settings.topics = topics.map(function(t) {
      return t.id;
    });
    researchedTopics = company.topics.map(function(t) {
      return t.id;
    });
    settings.researchedTopics = researchedTopics;
    platforms = Platforms.getPlatformsOnMarket(company).filter(function(p) {
      return !p.isCustom && Platforms.doesPlatformSupportGameSize(p, "medium");
    });
    settings.platforms = platforms.map(function(p) {
      return p.id;
    });
    settings.excludes = [];
    lastGame = company.gameLog.last();
    if (lastGame) {
      settings.excludes.push({
        genre: lastGame.genre.id,
        topic: lastGame.topic.id
      });
    }
  } else {
    topics = settings.topics.map(function(id) {
      return Topics.topics.first(function(t) {
        return t.id === id;
      });
    });
    researchedTopics = settings.researchedTopics.map(function(id) {
      return Topics.topics.first(function(t) {
        return t.id === id;
      });
    });
    allPlatforms = Platforms.getPlatforms(company, true);
    platforms = settings.platforms.map(function(id) {
      return allPlatforms.first(function(p) {
        return p.id === id;
      });
    });
  }
  excludes = settings.excludes.slice();
  count = SDP.Util.getRandomInt(random, maxNumber);
  if (settings.intialSettings) {
    count = Math.max(1, count);
  }
  sizes = ["medium"];
  if (company.canDevelopLargeGames()) {
    sizes.push("large", "large", "large");
  }
  audiences = SDP.Enum.Audience.toArray();
  publishers = ProjectContracts.getAvailablePublishers(company);
  publishers.push(ProjectContracts.getPublishingCompanies(company));
  sizeBasePay = {
    medium: 15e4,
    large: 15e5 / 2
  };
  for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    if (platform && (platform.company && random.random() <= 0.2)) {
      publisher = publishers.find(function(val) {
        return val.toString() === platform.company;
      });
    } else if (random.random() <= 0.1) {
      publisher = publishers.pickRandom(random);
    } else {
      publisher = publishers.filter(function(val) {
        return !(typeof val.isCompany === "function" ? val.isCompany() : void 0);
      }).pickRandom(random);
    }
    diffculty = 0;
    genre = void 0;
    topic = void 0;
    if (random.random() <= 0.7) {
      genre = publisher.getGenre != null ? publisher.getGenre(random) : General.getAvailableGenres(company).pickRandom(random);
      diffculty += 0.1;
    }
    if (random.random() <= 0.7) {
      while (true) {
        if (random.random() <= 0.7) {
          topic = publisher.getTopic != null ? publisher.getTopic(random, topics.except(researchedTopics)) : topics.except(researchedTopics).pickRandom(random);
        } else {
          topic = publisher.getTopic != null ? publisher.getTopic(random, topics) : topics.pickRandom(random);
        }
        if (topic != null) {
          break;
        }
        if (!excludes.some(function(e) {
          return ((genre == null) || e.genre === genre.id) && e.topic === topic.id;
        })) {
          break;
        }
      }
      if (topic != null) {
        difficulty += 0.1;
      }
    }
    if (genre || topic) {
      excludes.push({
        genre: genre != null ? genre.id : void 0,
        topic: topic != null ? topic.id : void 0
      });
    }
    platform = void 0;
    if (random.random() <= 0.7) {
      platform = publisher.getPlatform != null ? publisher.getPlatform(random, platforms) : platform = platforms.pickRandom(random);
    }
    audience = void 0;
    if (company.canSetTargetAudience() && random.random() <= 0.2) {
      audience = publisher.getAudience != null ? publisher.getAudience(random) : audience = audiences.pickRandom(random);
    }
    diffculty += 0.8 * random.random();
    minScore = 4 + Math.floor(5 * diffculty);
    while (true) {
      size = sizes.pickRandom(random);
      if (!((platform != null) && !Platforms.doesPlatformSupportGameSize(platform, size))) {
        break;
      }
    }
    basePay = sizeBasePay[size];
    pay = basePay * (minScore / 10);
    pay /= 5e3;
    pay = Math.max(1, Math.floor(pay)) * 5e3;
    penalty = pay * 1.2 + pay * 1.8 * random.random();
    penalty /= 5e3;
    penalty = Math.floor(penalty) * 5e3;
    royaltyRate = Math.floor(7 + 8 * difficulty) / 100;
    name = (topic ? topic.name : 'Any Topic'.localize()) + " / " + (genre ? genre.name : 'Any Genre'.localize());
    if (!platform || Platforms.getPlatformsOnMarket(company).first(function(p) {
      return p.id === platform.id;
    })) {
      pubName = publisher.getName != null ? publisher.getName() : publisher.toString();
      contracts.push({
        id: "publisherContracts",
        refNumber: Math.floor(Math.random() * 65535),
        type: "gameContract",
        name: name,
        description: "Publisher: {0}".localize().format(pubName),
        publisher: pubName,
        topic: topic ? topic.id : topic,
        genre: genre ? genre.id : genre,
        platform: platform ? platform.id : void 0,
        gameSize: size,
        gameAudience: audience,
        minScore: minScore,
        payment: pay,
        penalty: penalty,
        royaltyRate: royaltyRate
      });
    } else {
      count++;
    }
  }
  return contracts;
};

ProjectContracts.publisherContracts.getContract = function(company) {
  return SDP.GDT.Internal.generatePublisherContracts(company, SDP.GDT.Internal.getGenericContractsSettings(company, "publisher"), 5).filter(function(c) {
    return !c.skip;
  });
};


/*
Allows adding of standard contract work
 */

ProjectContracts.moddedContracts = [];

ProjectContracts.getAvailableModContractsOf = function(company, size) {
  var c, contracts, j, len, ref;
  contracts = [];
  ref = ProjectContracts.moddedContracts;
  for (j = 0, len = ref.length; j < len; j++) {
    c = ref[j];
    if ((c.isAvailable == null) || ((c.isAvailable != null) && c.isAvailable(company))) {
      if (c.size === size) {
        contracts.push(c);
      }
    }
  }
  return contracts;
};

ProjectContracts.genericContracts.__oldGetContract = ProjectContracts.genericContracts.getContract;

ProjectContracts.genericContracts.getContract = function(company) {
  var contracts, genCon, random, resultContracts, seed, settings;
  settings = SDP.GDT.Internal.getGenericContractsSettings(company, "small");
  seed = SDP.Util.getSeed(settings);
  random = new MersenneTwister(seed);
  genCon = SDP.GDT.Internal.generateContracts;
  resultContracts = [];
  contracts = ProjectContracts.genericContracts.__oldGetContract(company);
  contracts.addRange(genCon(company, settings, ProjectContracts.getAvailableModContractsOf(company, "small"), 4));
  if (company.flags.mediumContractsEnabled) {
    settings = SDP.GDT.Internal.getGenericContractsSettings(company, "medium");
    contracts.addRange(genCon(company, settings, ProjectContracts.getAvailableModContractsOf(company, "medium"), 3));
  }
  if (company.flags.largeContractsEnabled) {
    settings = SDP.GDT.Internal.getGenericContractsSettings(company, "large");
    contracts.addRange(genCon(company, settings, ProjectContracts.getAvailableModContractsOf(company, "large"), 2));
  }
  return contracts.shuffle(random).filter(function(c) {
    return !c.skip;
  });
};

SDP.GDT.Internal.generateContracts = function(company, settings, sourceSet, size, maxNumber) {
  var contract, contracts, count, i, item, j, random, ref, seed, set;
  seed = SDP.Util.getSeed(settings);
  random = new MersenneTwister(seed);
  contracts = [];
  set = sourceSet.slice();
  count = SDP.Util.getRandomInt(random, maxNumber);
  if (settings.intialSettings) {
    count = Math.max(1, count);
  }
  for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    if (!(set.length > 0)) {
      continue;
    }
    item = set.pickRandom(random);
    set.remove(item);
    contract = SDP.GDT.Internal.generateSpecificContract(company, item, size, random);
    contract.id = "genericContracts";
    contract.index = i;
    if (settings.contractsDone && settings.contractsDone.indexOf(i) !== -1) {
      contract.skip = true;
    }
    contracts.push(contract);
  }
  return contracts;
};

SDP.GDT.Internal.generateSpecificContract = function(company, template, size, random) {
  var d, factor, minPoints, pay, penalty, pointPart, points, r, t, weeks;
  r = random.random();
  if (random.random() > 0.8) {
    r += random.random();
  }
  minPoints = 11;
  if (size === "medium") {
    minPoints = 30;
  }
  if (size === "large") {
    minPoints = 100;
  }
  if (minPoints === 12 && company.staff.length > 2) {
    minPoints += 6;
  }
  factor = company.getCurrentDate().year / 25;
  minPoints += minPoints * factor;
  points = minPoints + minPoints * r;
  pointPart = points / (template.dF + template.tF);
  d = pointPart * template.dF;
  t = pointPart * template.tF;
  d += d * 0.2 * random.random() * random.randomSign();
  t += t * 0.2 * random.random() * random.randomSign();
  d = Math.floor(d);
  t = Math.floor(t);
  pay = points * 1e3;
  pay /= 1e3;
  pay = Math.floor(pay) * 1e3;
  weeks = Math.floor(3 + 7 * random.random());
  if (size === "small") {
    weeks = Math.floor(3 + 3 * random.random());
  }
  penalty = pay * 0.2 + pay * 0.3 * random.random();
  penalty /= 1e3;
  penalty = Math.floor(penalty) * 1e3;
  return {
    name: template.name,
    description: template.description,
    requiredD: d,
    requiredT: t,
    spawnedD: 0,
    spawnedT: 0,
    payment: pay,
    penalty: -penalty,
    weeksToFinish: weeks,
    rF: template.rF,
    isGeneric: true,
    size: size
  };
};


/*
Allows adding reviewer names to the reviewer list along with existing and retire dates
Allows adding review messages
 */

Reviews.moddedReviewers = [];

Reviews.moddedMessages = [];

Reviews.vanillaReviewers = [
  {
    id: 'StarGames',
    name: 'Star Games'
  }, {
    id: 'InformedGamer',
    name: 'Informed Game'
  }, {
    id: 'GameHero',
    name: 'Game Hero'
  }, {
    id: 'AllGames',
    name: 'All Games'
  }
];

Reviews.getAllReviewers = function() {
  var result;
  result = Reviews.vanillaReviewers.slice();
  result.addRange(Reviews.moddedReviewers.slice());
  return result;
};

Reviews.getAvailableReviewers = function(company) {
  var week;
  week = Math.floor(company.currentWeek);
  return Reviews.getAllReviewers().filter(function(val) {
    return ((val.startWeek == null) || week > General.getWeekFromDateString(val.startWeek, val.ignoreGameLengthModifier)) && ((val.retireWeek == null) || week < General.getWeekFromDateString(val.retireWeek, val.ignoreGameLengthModifier));
  });
};

Reviews.getFourRandomReviewers = function(company) {
  var first, forth, random, reviews, second, third;
  reviews = Reviews.getAvailableReviewers(company);
  if (reviews.length < 4) {
    throw "Reviewers are missing";
  }
  if (reviews.length === 4) {
    return [reviews[0], reviews[1], reviews[2], reviews[3]];
  }
  random = company._mersenneTwister;
  first = reviews.pickRandom(random);
  reviews = reviews.except(first);
  second = reviews.pickRandom(random);
  reviews = reviews.except(second);
  third = reviews.pickRandom(random);
  reviews = reviews.except(third);
  forth = reviews.pickRandom(random);
  company.randomCalled += 4;
  return [first, second, third, forth];
};

Reviews.getModdedPositiveMessages = function(game, score) {
  var j, len, m, ref, result;
  result = [];
  ref = Reviews.moddedMessages;
  for (j = 0, len = ref.length; j < len; j++) {
    m = ref[j];
    if (m.isPositive && !m.isNegative) {
      if (m.getMessage != null) {
        result.push(m.getMessage(game, score));
      } else if (m.message != null) {
        result.push(m.message);
      }
    }
  }
  return result;
};

Reviews.getModdedNegativeMessages = function(game, score) {
  var j, len, m, ref, result;
  result = [];
  ref = Reviews.moddedMessages;
  for (j = 0, len = ref.length; j < len; j++) {
    m = ref[j];
    if (m.isNegative && !m.isPositive) {
      if (m.getMessage != null) {
        result.push(m.getMessage(game, score));
      } else if (m.message != null) {
        result.push(m.message);
      }
    }
  }
  return result;
};

Reviews.getModdedGenericMessages = function(game, score) {
  var j, len, m, ref, result;
  result = [];
  ref = Reviews.moddedMessages;
  for (j = 0, len = ref.length; j < len; j++) {
    m = ref[j];
    if (!m.isNegative && !m.isPositive) {
      if (m.getMessage != null) {
        result.push(m.getMessage(game, score));
      } else if (m.message != null) {
        result.push(m.message);
      }
    }
  }
  return result;
};

Reviews.__oldGetGenericReviewMessage = Reviews.getGenericReviewMessage;

Reviews.getGenericReviewMessage = function(game, score) {
  if (game.company.getRandom() <= 0.5) {
    return Reviews.getModdedGenericMessages(game, score);
  } else {
    return Reviews.__oldGetGenericReviewMessage(game, score);
  }
};

Reviews.getReviews = function(game, finalScore, positiveMessages, negativeMessages) {
  var i, intScore, j, message, reviewers, reviews, score, scoreVariation, scores, usedMessages, variation;
  intScore = Math.floor(finalScore).clamp(1, 10);
  if (finalScore >= 9.5) {
    intScore = 10;
  }
  reviewers = Reviews.getFourRandomReviewers(game.company);
  reviews = [];
  usedMessages = [];
  scores = [];
  variation = 1;
  positiveMessages.addRange(Reviews.getModdedPositiveMessages(game));
  negativeMessages.addRange(Reviews.getModdedNegativeMessages(game));
  for (i = j = 0; j < 4; i = ++j) {
    if (intScore === 5 || intScore === 6) {
      variation = game.company.getRandom() < 0.05 ? 2 : 1;
    }
    scoreVariation = Math.randomSign() === 1 ? 0 : variation * Math.randomSign();
    score = (intScore + scoreVariation).clamp(1, 10);
    if (score === 10 && (scores.length === 3 && scores.average() === 10)) {
      if (!game.flags.psEnabled) {
        if (Math.floor(finalScore) < 10 || game.company.getRandom() < 0.8) {
          score--;
        }
      } else if (Math.floor(finalScore) === 10 && game.company.getRandom() < 0.4) {
        score++;
      }
    }
    message = void 0;
    while (true) {
      if (game.company.getRandom() <= 0.2) {
        if (scoreVariation >= 0 && (score > 2 && positiveMessages.length !== 0)) {
          message = positiveMessages.pickRandom();
        } else {
          if (scoreVariation < 0 && (score < 6 && negativeMessages.length !== 0)) {
            message = negativeMessages.pickRandom();
          }
        }
      } else {
        message = void 0;
      }
      if (!message) {
        message = Reviews.getGenericReviewMessage(game, score);
      }
    }
    if (usedMessages.weakIndexOf(message) === -1) {
      break;
    }
    usedMessages.push(message);
    scores.push(score);
    reviews.push({
      score: score,
      message: message,
      reviewerName: reviewers[i].name
    });
  }
  return reviews;
};


/*
Forces all games to contain the company
 */

Game = (function(superClass) {
  extend(Game, superClass);

  function Game(company) {
    this.id = GameManager.getGUID();
    this.title = void 0;
    this.genre = void 0;
    this.topic = void 0;
    this.platforms = [];
    this.engine = void 0;
    this.state = GameState.notStarted;
    this.gameSize = "small";
    this.targetAudience = "everyone";
    this.missionLog = [];
    this.salesCashLog = [];
    this.featureLog = null;
    this.score = 0;
    this.reviews = [];
    this.costs = 0;
    this.hypePoints = 0;
    this.technologyPoints = 0;
    this.bugs = 0;
    this.freeBugCount = 0;
    this.designPoints = 0;
    this.currentSalesCash = 0;
    this.totalSalesCash = 0;
    this.amountSold = 0;
    this.releaseWeek = 0;
    this.fansChangeTarget = 0;
    this.fansChanged = 0;
    this.initialSalesRank = 0;
    this.currentSalesRank = 0;
    this.topSalesRank = 0;
    this.researchFactor = 1;
    this.revenue = 0;
    this.flags = {};
    this.soldOut = false;
    if (company.conferenceHype) {
      this.hypePoints = company.conferenceHype;
      company.conferenceHype = Math.floor(company.conferenceHype / 3);
    }
  }

  return Game;

})(Game);


/*
Allow adding famous people and adding custom applicant algorithims
 */

JobApplicants = {};

JobApplicants.moddedFamous = [];

JobApplicants.moddedAlgorithims = [];

JobApplicants.getRandomMale = function(random) {
  var results;
  results = [];
  JobApplicants.moddedAlgorithims.forEach(function(val) {
    if (val.forMale) {
      return results.push(val.apply(random));
    }
  });
  return results.pickRandom(random);
};

JobApplicants.getRandomFemale = function(random) {
  var results;
  results = [];
  JobApplicants.moddedAlgorithims.forEach(function(val) {
    if (!val.forMale) {
      return results.push(val.apply(random));
    }
  });
  return results.pickRandom(random);
};

JobApplicants.getFamousMale = function(tech, design, random) {
  var results;
  results = [];
  JobApplicants.moddedFamous.forEach(function(val) {
    if (val.forMale) {
      return results.push(val.apply(random, tech, design));
    }
  });
  return results.pickRandom(random);
};

JobApplicants.getFamousFemale = function(tech, design, random) {
  var results;
  results = [];
  JobApplicants.moddedFamous.forEach(function(val) {
    if (!val.forMale) {
      return results.push(val.apply(random, tech, design));
    }
  });
  return results.pickRandom(random);
};

JobApplicants.searchTests = [
  {
    id: "ComplexAlgorithms",
    name: "Complex Algorithms".localize(),
    minT: 0.6
  }, {
    id: "GameDemo",
    name: "Game Demo".localize(),
    minD: 0.3,
    minT: 0.3
  }, {
    id: "Showreel",
    name: "Showreel".localize(),
    minD: 0.6
  }
];

UI.__olgGenerateJobApplicants = UI._generateJobApplicants;

UI._generateJobApplicants = function() {
  var a, applicants, baseValue, company, count, d, goodRoll, i, isFamous, j, k, level, maxBonus, maxD, maxRerolls, minD, name, newApplicants, oldApplicants, q, qBonusFactor, r, rBonusFactor, random, ratio, ref, ref1, rerolls, s, sBonusFactor, salary, settings, sex, t, takenNames, test;
  oldApplicants = UI.__olgGenerateJobApplicants();
  settings = GameManager.uiSettings["findStaffData"];
  if (!settings) {
    settings = {
      ratio: 0.1,
      tests: []
    };
  }
  if (!settings.seed) {
    settings.seed = Math.floor(GameManager.company.getRandom() * 65535);
  }
  ratio = settings.ratio;
  test = JobApplicants.searchTests.first(function(t) {
    return t.id === settings.tests.first();
  });
  company = GameManager.company;
  random = new MersenneTwister(settings.seed);
  newApplicants = [];
  count = Math.floor(2 + 3 * (ratio + 0.2).clamp(0, 1));
  rerolls = 0;
  maxRerolls = 2;
  maxBonus = company.currentLevel === 4 ? 4 / 5 : 2 / 5;
  takenNames = GameManager.company.staff.map(function(s) {
    return s.name;
  });
  for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    qBonusFactor = ratio / 3 + (1 - ratio / 3) * random.random();
    if (random.random() >= 0.95) {
      maxBonus += 1 / 5;
    }
    q = 1 / 5 + maxBonus * qBonusFactor;
    level = Math.floor(q * 5).clamp(1, 5);
    maxD = 1;
    minD = 0;
    if (test) {
      if (test.minT) {
        maxD -= test.minT;
      }
      if (test.minD) {
        minD = test.minD;
        maxD -= minD;
      }
    }
    baseValue = 200 * level;
    d = baseValue * minD + baseValue * maxD * random.random();
    t = baseValue - d;
    rBonusFactor = random.random();
    r = 1 / 5 + maxBonus * rBonusFactor;
    sBonusFactor = random.random();
    s = 1 / 5 + maxBonus * sBonusFactor;
    goodRoll = sBonusFactor > 0.5 && (qBonusFactor > 0.5 && rBonusFactor > 0.5);
    if (!goodRoll && (rerolls < maxRerolls && random.random() <= (ratio + 0.1).clamp(0, 0.7))) {
      i--;
      rerolls++;
      continue;
    }
    rerolls = 0;
    isFamous = false;
    sex = "male";
    while (true) {
      sex = "male";
      if (goodRoll) {
        name = JobApplicants.getFamousMale(t, d, random)(random.random() > 0.15 ? void 0 : (name = JobApplicants.getFamousFemale(t, d, random), sex = "female"));
        isFamous = true;
      } else {
        name = JobApplicants.getRandomMale(random)(random.random() > 0.25 ? void 0 : (name = JobApplicants.getRandomFemale(random), sex = "female"));
        isFamous = false;
      }
    }
    if (takenNames.indexOf(name) === -1) {
      break;
    }
    takenNames.push(name);
    salary = Character.BASE_SALARY_PER_LEVEL * level;
    salary += salary * 0.2 * random.random() * random.randomSign();
    salary = Math.floor(salary / 1e3) * 1e3;
    newApplicants.push({
      name: name,
      qualityFactor: q,
      technologyFactor: t / 500,
      designFactor: d / 500,
      researchFactor: r,
      speedFactor: s,
      salary: salary,
      isFamous: isFamous,
      sex: sex
    });
  }
  GDT.fire(GameManager, GDT.eventKeys.gameplay.staffApplicantsGenerated, {
    newApplicants: newApplicants,
    settings: settings,
    rng: random
  });
  applicants = [];
  for (i = k = 0, ref1 = count; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
    if (random.random() >= 0.5) {
      a = newApplicants.pickRandom(random);
      applicants.push(a);
      newApplicants.remove(a);
    } else {
      a = oldApplicants.pickRandom(random);
      applicants.push(a);
      oldApplicants.remove(a);
    }
  }
  return applicants;
};
