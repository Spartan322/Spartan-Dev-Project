// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SDP.GDT.__notUniquePlatform = function(id) {
    var item;
    item = {
      id: id
    };
    return !Checks.checkUniqueness(item, 'id', Platforms.allPlatforms);
  };

  SDP.GDT.Platform = (function() {
    Platform.prototype.events = [];

    Platform.prototype.marketPoints = [];

    Platform.prototype.genreWeight = Weight.Default();

    Platform.prototype.audienceWeight = Weight.Default(false);

    function Platform(name, id) {
      if (id == null) {
        id = name;
      }
      this.setWeight = bind(this.setWeight, this);
      this.removeMarketDate = bind(this.removeMarketDate, this);
      this.addMarketPoint = bind(this.addMarketPoint, this);
      this.removeEvent = bind(this.removeEvent, this);
      this.addEvent = bind(this.addEvent, this);
      name = name.localize("game platform");
      this.getName = function() {
        return name;
      };
      this.company = null;
      this.startAmount = 0;
      this.unitsSold = 0;
      this.licensePrice = 0;
      this.publishDate = SDP.GDT.Date(1, 1, 1);
      this.retireDate = SDP.GDT.Date.Max();
      this.devCost = 0;
      this.techLevel = 1;
      this.iconUri = void 0;
      this.baseIconUri = void 0;
      this.imageDates = void 0;
      this.getId = function() {
        return id;
      };
    }

    Platform.prototype.addEvent = function(e) {
      if (e instanceof SDP.GDT.Event) {
        this.events.push(e);
      }
      return this;
    };

    Platform.prototype.removeEvent = function(id) {
      var index;
      index = this.events.findIndex(function(val) {
        return val.id === id;
      });
      if (index !== -1) {
        return this.events.splice(index, 1);
      }
    };

    Platform.prototype.addMarketPoint = function(date, amount) {
      if (date == null) {
        return;
      }
      if (date instanceof SDP.GDT.Date) {
        date = date.toString();
      } else if ((date.week != null) && (date.month != null) && (date.year != null)) {
        date = "{0}/{1}/{2}".format(date.year, date.month, date.week);
      }
      if (typeof date !== 'string') {
        return;
      }
      if ((date != null) && (amount != null)) {
        this.marketPoints.push({
          'date': date,
          'amount': amount
        });
      }
      return this;
    };

    Platform.prototype.removeMarketDate = function(date) {
      var index;
      index = this.marketPoints.findIndex(function(val) {
        return val.date === date;
      });
      if (index !== -1) {
        return this.marketPoints.splice(index, 1);
      }
    };

    Platform.prototype.setWeight = function(weight) {
      if (SDP.GDT.Weight == null) {
        return;
      }
      if (!(weight instanceof SDP.GDT.Weight)) {
        return;
      }
      if (weight.isGenre()) {
        this.genreWeight = weight;
      } else {
        this.audienceWeight = weight;
      }
      return this;
    };

    Platform.prototype.getPrimEvents = function() {
      var arr, evt, i, len, ref;
      arr = [];
      ref = this.events;
      for (i = 0, len = ref.length; i < len; i++) {
        evt = ref[i];
        arr.push(evt.toInput());
      }
      return arr;
    };

    Platform.prototype.toInput = function() {
      var id;
      id = this.getId();
      while (SDP.GDT.__notUniquePlatform(id)) {
        id += '_';
      }
      this.getId = function() {
        return id;
      };
      return {
        id: this.getId(),
        name: this.getName(),
        iconUri: this.iconUri,
        imageDates: this.imageDates,
        baseIconUri: this.baseIconUri,
        company: typeof this.company.getName === "function" ? this.company.getName() : this.company.toString(),
        startAmount: this.startAmount,
        unitsSold: this.unitsSold,
        marketKeyPoints: this.marketPoints,
        licensePrice: this.licensePrice,
        published: this.publishDate,
        platformRetireDate: this.retireDate,
        developmentCost: this.devCost,
        genreWeightings: this.genreWeight.toGenre().get(),
        audienceWeightings: this.audienceWeight.toAudience().get(),
        techLevel: this.techLevel,
        events: this.getPrimEvents()
      };
    };

    return Platform;

  })();

}).call(this);
