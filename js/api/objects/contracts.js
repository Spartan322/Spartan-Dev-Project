// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

SDP.GDT.Contract = (function() {
  function Contract() {
    var args, name, obj;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.setDescription = bind(this.setDescription, this);
    if (args.length === 1) {
      obj = args[0];
      this.isAvailable = obj.isAvailable;
      if (this.isAvailable != null) {
        this.isAvailable.bind(this);
      }
      if (obj instanceof Contract) {
        this.setDescription(obj.description);
        this.setDesign(obj.designFactor);
        this.setTech(obj.techFactor);
        this.setResearch(obj.researchFactor);
      } else {
        this.setDescription(obj.description);
        this.setDesign(obj.dF);
        this.setTech(obj.tF);
        this.setResearch(obj.rF);
      }
    } else {
      this.researchFactor = void 0;
      this.isAvailable = void 0;
      this.setDescription(args[3]);
      name = args[0];
      this.getName = function() {
        return name;
      };
      this.setDesign(args[1]);
      this.setTech(args[2]);
    }
  }

  Contract.prototype.setDescription = function(description) {
    if (description.constructor === String) {
      return this.description = description;
    } else if (description.constructor === [].constructor && description[0].constructor === String) {
      return this.description = description.join(" ");
    }
  };

  Contract.prototype.setDesign = function(factor) {
    if (factor.constructor === Number) {
      return this.designFactor = factor;
    } else if (factor.constructor === [].constructor) {
      return this.designFactor = factor.sum();
    }
  };

  Contract.prototype.setTech = function(factor) {
    if (factor.constructor === Number) {
      return this.techFactor = factor;
    } else if (factor.constructor === [].constructor) {
      return this.techFactor = factor.sum();
    }
  };

  Contract.prototype.setResearch = function(factor) {
    if (factor.constructor === Number) {
      return this.researchFactor = factor;
    } else if (factor.constructor === [].constructor) {
      return this.researchFactor = factor.sum();
    }
  };

  return Contract;

})();
