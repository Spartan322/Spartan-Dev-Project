// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SDP.GDT.__notUniquePublisher = function(id) {
    var item;
    item = {
      id: id
    };
    return !Checks.checkUniqueness(item, 'id', ProjectContracts.getAllPublishers());
  };

  SDP.GDT.Publisher = (function() {
    Publisher.prototype.topicOverride = [];

    Publisher.prototype.platformOverride = [];

    Publisher.prototype.genreWeightings = SDP.GDT.Weight.Default();

    Publisher.prototype.audWeightings = SDP.GDT.Weight.Default(false);

    function Publisher(name, id) {
      if (id == null) {
        id = name;
      }
      this.toInput = bind(this.toInput, this);
      this.getTopic = bind(this.getTopic, this);
      this.getPlatform = bind(this.getPlatform, this);
      this.getGenre = bind(this.getGenre, this);
      this.getAudience = bind(this.getAudience, this);
      this.toString = bind(this.toString, this);
      this.setWeight = bind(this.setWeight, this);
      this.addPlatformOverride = bind(this.addPlatformOverride, this);
      this.addTopicOverride = bind(this.addTopicOverride, this);
      if ((SDP.GDT.Company != null) && name instanceof SDP.GDT.Company) {
        this.getCompany = function() {
          return name;
        };
        id = name.getId();
        name = name.getName();
      } else if ((name != null) && typeof name === 'object') {
        name.isPrimitive = true;
        this.getCompany = function() {
          return name;
        };
        id = name.id;
        name = name.name;
      }
      name = name.localize("publisher");
      this.getId = function() {
        return id;
      };
      this.getName = function() {
        return name;
      };
      this.startWeek = void 0;
      this.retireWeek = void 0;
    }

    Publisher.prototype.addTopicOverride = function(id, weight) {
      if (Topics.topics.findIndex(function(val) {
        return val.id === id;
      }) !== -1) {
        return this.topicOverride.push({
          id: id,
          weight: weight.clamp(0, 1)
        });
      }
    };

    Publisher.prototype.addPlatformOverride = function(id, weight) {
      if (Platforms.allPlatforms.findIndex(function(val) {
        return val.id === id;
      }) !== -1) {
        return this.platformOverride.push({
          id: id,
          weight: weight.clamp(0, 1)
        });
      }
    };

    Publisher.prototype.setWeight = function(weight) {
      if (weight.isGenre()) {
        this.genreWeightings = weight;
      }
      if (weight.isAudience()) {
        return this.audWeightings = weight;
      }
    };

    Publisher.prototype.toString = function() {
      return this.getName();
    };

    Publisher.prototype.getAudience = function(random) {
      var a, auds, j, len, ref, v;
      auds = SDP.Enum.Audience.toArray();
      auds.forEach(function(val, i, arr) {
        return arr.push(val, val);
      });
      ref = SDP.Enum.Audience.toArray();
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        v = Math.floor(General.getAudienceWeighting(this.audWeightings.get(), a) * 10) - 8;
        if (Math.abs(v) > 2) {
          continue;
        }
        while (v > 0) {
          auds.push(a);
          v--;
        }
        while (v < 0) {
          auds.splice(auds.findIndex(function(val) {
            return val === a;
          }), 1);
          v++;
        }
      }
      return auds.pickRandom(random);
    };

    Publisher.prototype.getGenre = function(random) {
      var defGenres, g, genres, j, len, v;
      defGenres = SDP.Enum.Genre.toArray();
      genres = SDP.Enum.Genre.toArray();
      genres.forEach(function(val, i, arr) {
        return arr.push(val, val);
      });
      for (j = 0, len = defGenres.length; j < len; j++) {
        g = defGenres[j];
        v = Math.floor(General.getGenreWeighting(this.genreWeightings.get(), g) * 10) - 8;
        if (Math.abs(v) > 2) {
          continue;
        }
        while (v > 0) {
          genres.push(g);
          v--;
        }
        while (v < 0) {
          genres.splice(genres.findIndex(function(val) {
            return val === g;
          }), 1);
          v++;
        }
      }
      return genres.pickRandom(random);
    };

    Publisher.prototype.getPlatform = function(random, defPlats) {
      var j, len, p, platforms, v;
      defPlats = defPlats.filter(function(p) {
        return this.platformOverride.findIndex(function(v) {
          return v.id === p.id;
        }) !== -1;
      });
      if (!defPlats) {
        return;
      }
      platforms = defPlats.splice();
      platforms.forEach(function(val, i, arr) {
        return arr.push(val, val);
      });
      for (j = 0, len = defPlats.length; j < len; j++) {
        p = defPlats[j];
        v = Math.floor(this.platformOverride.find(function(val) {
          return val.id === p.id;
        }).weight * 10) - 8;
        if (Math.abs(v) > 2) {
          continue;
        }
        while (v > 0) {
          platforms.push(p);
          v--;
        }
        while (v < 0) {
          platforms.splice(platforms.findIndex(function(val) {
            return val === g;
          }), 1);
          v++;
        }
      }
      return platforms.pickRandom(random);
    };

    Publisher.prototype.getTopic = function(random, defTopics) {
      var j, len, p, topics, v;
      defTopics = defTopics.filter(function(t) {
        return this.topicOverride.findIndex(function(v) {
          return v.id === t.id;
        }) !== -1;
      });
      if (!defPlats) {
        return;
      }
      topics = defTopics.map(function(val) {
        return val;
      });
      topics.forEach(function(val, i, arr) {
        return arr.push(val, val);
      });
      for (j = 0, len = defTopics.length; j < len; j++) {
        p = defTopics[j];
        v = Math.floor(this.topicOverride.find(function(val) {
          return val.id === p.id;
        }).weight * 10) - 8;
        if (Math.abs(v) > 2) {
          continue;
        }
        while (v > 0) {
          topics.push(p);
          v--;
        }
        while (v < 0) {
          topics.splice(topics.findIndex(function(val) {
            return val === g;
          }), 1);
          v++;
        }
      }
      return topics.pickRandom(random);
    };

    Publisher.prototype.toInput = function() {
      var id;
      id = this.getId();
      while (SDP.GDT.__notUniquePlatform(id)) {
        id += '_';
      }
      this.getId = function() {
        return id;
      };
      return {
        id: this.getId(),
        name: this.getName(),
        isCompany: this.getCompany() != null,
        company: this.getCompany(),
        getGenre: this.getGenre,
        getAudience: this.getAudience,
        getTopic: this.getTopic,
        getPlatform: this.getPlatform
      };
    };

    return Publisher;

  })();

}).call(this);
