// Generated by CoffeeScript 1.10.0

/*
Usage:
new Enum('name of enum', 'first enum name', 'first enum value', ...)
or
Enum.Generate('name of enum', 'first enum value', 'second enum value', ...)
is equal to
new Enum('name of enum', 'FIRST_ENUM_VALUE', 'first enum value', 'SECOND_ENUM_VALUE', 'second enum value', ...)

You can also access an enum's value by getting its name for example:
enum = Enum.Generate('enum', 'vals', 'vals2')
enum.VALS is now 'vals'
enum. VALS2 is now 'vals2'
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  SDP.Util.Enum = (function() {
    function Enum() {
      this.toString = bind(this.toString, this);
      this.toArray = bind(this.toArray, this);
      this.get = bind(this.get, this);
    }

    Enum.prototype.consturctor = function() {
      var i, j, k, len, len1, name, ref, results, v, values;
      name = arguments[0], values = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.values = [];
      for (i = j = 0, len = values.length; j < len; i = ++j) {
        v = values[i];
        if ((v.name != null) && (v.value != null)) {
          this.values.push(v);
        } else if (i % 2 === 0) {
          this.values.push({
            name: v.toString(),
            value: void 0
          });
        } else {
          this.values[this.values.length - 1].value = v;
        }
      }
      this.getName = function() {
        return name;
      };
      Object.defineProperty(this, 'values', {
        value: this.values,
        enumerable: true
      });
      ref = this.values;
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        v = ref[k];
        results.push(this[v.name] = v.value);
      }
      return results;
    };

    Enum.prototype.get = function(indexOrName) {
      if (typeof indexOrName === 'number') {
        this.values[indexOrName];
      }
      if (typeof indexOrName === 'string') {
        return this.values.find(function(val) {
          return name === indexOrName;
        });
      }
    };

    Enum.prototype.toArray = function() {
      var a, e, j, len, ref;
      a = [];
      ref = this.values;
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        a.push(e.value);
      }
      return a;
    };

    Enum.prototype.toString = function() {
      var i, j, len, ref, str, v;
      if (this.str != null) {
        this.str;
      }
      str = "Enum " + (this.getName()) + ": ";
      ref = this.values;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        v = ref[i];
        if (i < this.values.length - 1) {
          str += v.name + ":" + v.value + ", ";
        }
      }
      v = this.values[this.values.length - 1];
      str += v.name + ":" + v.value;
      this.str = str;
      return str;
    };

    Enum.Generate = function() {
      var j, len, name, resultVals, v, values;
      name = arguments[0], values = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      resultVals = [];
      for (j = 0, len = values.length; j < len; j++) {
        v = values[j];
        resultVals.push(v.toUpperCase().replace("/", "").replace(/\s/g, "_"), v);
      }
      return new Enum(name, resultVals);
    };

    return Enum;

  })();

}).call(this);
