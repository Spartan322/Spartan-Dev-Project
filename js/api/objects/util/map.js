// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

SDP.Util.Map = (function() {
  function Map() {
    var i, len, obj, origArr, ref;
    origArr = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.origArr = origArr;
    this.toArray = bind(this.toArray, this);
    this.containsVal = bind(this.containsVal, this);
    this.containsKey = bind(this.containsKey, this);
    this.get = bind(this.get, this);
    this.addByName = bind(this.addByName, this);
    this.add = bind(this.add, this);
    this.nameArray = [];
    this.map = {};
    ref = this.origArr;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      this.add(obj);
    }
  }

  Map.prototype.add = function(obj, getterName) {
    if (getterName == null) {
      getterName = "getName";
    }
    if (typeof obj[getterName] === 'function') {
      return this.addByName(obj[getterName](), obj);
    } else if (typeof obj.toString === 'function') {
      return this.addByName(obj.toString(), obj);
    }
  };

  Map.prototype.addByName = function(name, obj) {
    name = String(name);
    this.map[name] = obj;
    return this.nameArray.push(name);
  };

  Map.prototype.get = function(name) {
    return this.map[String(name)];
  };

  Map.prototype.containsKey = function(name) {
    return this.map[String(name)] != null;
  };

  Map.prototype.containsVal = function(val) {
    var i, len, obj, ref;
    ref = this.map;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      if (obj === val) {
        return true;
      }
    }
    return false;
  };

  Map.prototype.toArray = function() {
    var a, i, len, n, ref;
    a = this.cachedArray.slice(0);
    ref = this.nameArray;
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      if (a.indexOf(this.get(n)) === -1) {
        a.push(this.get(n));
      }
    }
    this.cachedArray = a.slice(0);
    return a;
  };

  return Map;

})();
