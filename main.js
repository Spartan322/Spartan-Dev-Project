// Generated by CoffeeScript 1.11.0

/* Definitions for the devised SpartaDoc
All types can either contain the name of the types as found here or the vanilla API as analogs, this is corrected by the SDP
---
@customType ResearchItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [String] type The SDP.GDT.Research.types string this represents
@instruction('optional' if 'v')
	@attribute [Integer] pointsCost The cost of the research in research points
	@attribute [Integer] duration The time it takes to complete the research in milliseconds
	@attribute [Integer] researchCost The cost this research will take to research, without devCost, small scale devCost = researchCost * 4
	@instruction('optional' if 'researchCost') @attribute [Integer] devCost The cost to develop with this research on in small scale
	@attribute [Integer] engineCost The cost to put this into an engine
	@defaults(pointsCost) @attribute [Integer] enginePoints The amount of points this will cost to put in an engine
@attribute [String] category May be SDP.Constants.ResearchCategory of the object, or maybe something else
@attribute [String] categoryDisplayName Similar to category, human readable version
@optional
	@attribute [Integer] v A basic value to scale the research by
	@attribute [String] group The group to assign this research to, prevents more then one group being selected on games
	@attribute [Boolean] consolePart Whether this research applies to console creation as well
	@attribute [Boolean] engineStart Whether the research is available to all engines without research, overrides canResearch to always return false
	@attribute [Function(Game)] canUse Determines whether this research can be used
		@fparam [Game] game The game to test use against
		@freturn [Boolean] Whether the research can be used
	@attribute [Function(CompanyItem)] canResearch Determines whether this research is allowed to be researched
		@fparam [CompanyItem] company The company to check whether its researchable for
		@freturn [Boolean] Whether the research can be researched
---
@customType PlatformItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [String] company The company name this platform belongs to
@attribute [Float] startAmount The starting amount of units sold on release (multiplied by 5000000)
@attribute [Float] unitsSold The resulting units sold by the end (multiplied by 5000000)
@attribute [Integer] licensePrice The one time license price to develop on the platform
@attribute [String] publishDate The release date of the platform
@attribute [String] retireDate The retire date of the platform
@attribute [Integer] devCost The dev cost for developing on the platform
@attribute [Integer] techLevel The tech level of the platform (1-9, determines how ingenious the platform and the games for it will be)
@attribute [String] iconUri The icon refered to for the icon of the platform (or base uri if contains imageDates)
@attribute [Array {String date, Float amount}] marketPoints The key date points of the market in which the units sold change to the amount
@attribute [Array [6 Float]] genreWeight The weightings per genre based on SDP.Constants.Genre
@attribute [Array [3 Float]] audienceWeight The weightings per audience based on SDP.Constants.Audience
@optional @attribute [Array [String]] imageDates The dates for the platform image to change
---
@customType TopicItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [Array [6 Float]] genreWeight The weightings per genre based on SDP.Constants.Genre
@attribute [Array [3 Float]] audienceWeight The weightings per audience based on SDP.Constants.Audience
@attribute [Array [6 Array [9 Float]]] overrides The mission overrides as described on the [wiki](https://github.com/greenheartgames/gdt-modAPI/wiki/missionOverrides)
---
@customType ResearchProjectItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [String] description The description of the project
@attribute [Integer] pointsCost The cost to make in research points
@attribute [String] iconUri The uri of the icon to display for the project
@attribute [Integer] targetZone The zone for the project to take place in (0 for Hardware Lab, 2 for Research Lab, Effects of 1 unknown)
@optional @attribute [Boolean] repeatable Determiners whether the project can be repeated
@optional @attribute [Function(CompanyItem)] canResearch Determines whether research can be done
	@fparam [CompanyItem] company The company being tested
	@freturn [Boolean] Whether research can be done on the project
@optional @attribute [Function(CompanyItem)] complete A function to perform on completion
	@fparam [CompanyItem] company The company responsible for completing the project
@optional @attribute [Function(CompanyItem)] cancel Activates on cancelation of the project
	@fparam [CompanyItem] company The company canceling the project
---
@customType TrainingItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [Integer] pointsCost The cost in research points
@attribute [Integer] duration How long it will take to complete the training
@attribute [String] category The category of the object
@attribute [String] categoryDisplayName Similar to category, human readable version
@optional
	@attribute [Integer] cost The cost in money
	@attribute [Function(CharacterObject, CompanyItem)] canSee Determines whether the staff can see this training
		@fparam [CharacterObject] staff The staff that should be able to see the training
		@fparam [CompanyItem] company The company the training is taken place in
		@freturn [Boolean] Whether the training can be seen
	@attribute [Function(CharacterObject, CompanyItem)] canUse Determines whether the staff can use this training
		@fparam [CharacterObject] staff The staff that should be able to use the training
		@fparam [CompanyItem] company The company the training is taken place in
		@freturn [Boolean] Whether the training can be used
	@attribute [Function(CharacterObject, Integer)] tick Triggers every game tick this training is active
		@fparam [CharacterObject] staff The staff that is performing the training
		@fparam [Integer] delta The amount of milliseconds passed from the last tick
	@attribute [Function(CharacterObject)] complete Triggers on training completion
		@fparam [CharacterObject] staff The staff to complete the training
---
@customType ContractItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
@attribute [String] description The description of the contract
@attribute [String] size The size of the contract, either small, medium, or large
@attribute [Float] tF The tech factor of the contract
@attribute [Float] dF The design factor of the contract
@optional
	@attribute [Function(CompanyItem, MersenneTwister)] generateCard Generates a contract card depending on the company and random
		@fparam [CompanyItem] company The company to generate the card for
		@fparam [MersenneTwister] random The random object used for generating the contract
		@freturn [ContractCardItem] The card item representing the contract generated
	@attribute [ContractCardItem] card The card item to repsent the contract definitely (generateCard takes priority)
@note generateCard and card can be ignored if tF and dF are supplied and vice versa
@optional
	@attribute [Float] rF The research factor generated
---
@customType PublisherItem
@attribute [String] id The unique id of the item
@attribute [String] name The name of the item
---
@customType ReviewerItem
---
@customType NotificationItem
@attribute [String] header The header of the notification
@attribute [String] text The text to display upon notifcation being tiggered
@instruction('optional' if 'options')
	@attribute [String] buttonTxt The text for the button to display
@instruction('optional' if 'buttonTxt')
	@attribute [Array [1-3 String]] options A collection of possible button options to choose from
@optional
	@attribute [String] image The image uri for the notification
	@attribute [String] sourceId The id of the corresponding event object
	@attribute [Integer] weeksUntilFire The amount of weeks that must pass before this notification is fired
---
@customType EventItem
@attribute [String] id The id of the event
@attribute [Function(CompanyItem)] trigger Determines whether the event can trigger
	@fparam [CompanyItem] company The company to test this trigger by
@instruction('optional' if 'getNotification') @attribute [NotificationItem] notification The notification for this event (overrides getNotification)
@instruction('optional' if 'notification') @attribute [Function(CompanyItem)] Retrieves a notification for this event
	@fparam [CompanyItem] company The company to retrieve the notification for
	@freturn [NotificationItem] The notification that was produced
@optional
	@attribute [Boolean] isRandomEvent Determines whether this event is random
	@attribute [Function(Integer)] complete Determines what happens upon completion (this.runningCompany refers to the active company for this event)
		@fparam [Integer] decision The decision chosen in the notification from 0 to 2
---
@customType ContractCardItem
@optional
	@attribute [Integer] techPoints The tech points to generate for the contract (overrides tF)
	@attribute [Integer] designPoints The design points to generate for the contract (overrides dF)
	@attribute [Float] tF The tech factor generated for the card
	@attribute [Float] dF The design factor generated for the card
	@attribute [Integer] minPoints The minimum points to generate based on factors (ignored if techPoints and designPoints supplied)
	@attribute [Integer] pay The pay available upon the contract's completion
	@attribute [Integer] penalty The penalty for job failure
	@attribute [Integer] weeks The amount of weeks determined to finish the contracts
 */
var Base, Companies, JobApplicants, SDP, classes, convertClasses, style,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

style = require('./lib-js/style');

SDP = {};

Companies = {};

JobApplicants = {};


/*
jSTORAGE
 */

(function(){function C(){var a="{}";if("userDataBehavior"==f){g.load("jStorage");try{a=g.getAttribute("jStorage")}catch(b){}try{r=g.getAttribute("jStorage_update")}catch(c){}h.jStorage=a}D();x();E()}function u(){var a;clearTimeout(F);F=setTimeout(function(){if("localStorage"==f||"globalStorage"==f)a=h.jStorage_update;else if("userDataBehavior"==f){g.load("jStorage");try{a=g.getAttribute("jStorage_update")}catch(b){}}if(a&&a!=r){r=a;var l=p.parse(p.stringify(c.__jstorage_meta.CRC32)),k;C();k=p.parse(p.stringify(c.__jstorage_meta.CRC32));
var d,n=[],e=[];for(d in l)l.hasOwnProperty(d)&&(k[d]?l[d]!=k[d]&&"2."==String(l[d]).substr(0,2)&&n.push(d):e.push(d));for(d in k)k.hasOwnProperty(d)&&(l[d]||n.push(d));s(n,"updated");s(e,"deleted")}},25)}function s(a,b){a=[].concat(a||[]);var c,k,d,n;if("flushed"==b){a=[];for(c in m)m.hasOwnProperty(c)&&a.push(c);b="deleted"}c=0;for(d=a.length;c<d;c++){if(m[a[c]])for(k=0,n=m[a[c]].length;k<n;k++)m[a[c]][k](a[c],b);if(m["*"])for(k=0,n=m["*"].length;k<n;k++)m["*"][k](a[c],b)}}function v(){var a=(+new Date).toString();
if("localStorage"==f||"globalStorage"==f)try{h.jStorage_update=a}catch(b){f=!1}else"userDataBehavior"==f&&(g.setAttribute("jStorage_update",a),g.save("jStorage"));u()}function D(){if(h.jStorage)try{c=p.parse(String(h.jStorage))}catch(a){h.jStorage="{}"}else h.jStorage="{}";z=h.jStorage?String(h.jStorage).length:0;c.__jstorage_meta||(c.__jstorage_meta={});c.__jstorage_meta.CRC32||(c.__jstorage_meta.CRC32={})}function w(){if(c.__jstorage_meta.PubSub){for(var a=+new Date-2E3,b=0,l=c.__jstorage_meta.PubSub.length;b<
l;b++)if(c.__jstorage_meta.PubSub[b][0]<=a){c.__jstorage_meta.PubSub.splice(b,c.__jstorage_meta.PubSub.length-b);break}c.__jstorage_meta.PubSub.length||delete c.__jstorage_meta.PubSub}try{h.jStorage=p.stringify(c),g&&(g.setAttribute("jStorage",h.jStorage),g.save("jStorage")),z=h.jStorage?String(h.jStorage).length:0}catch(k){}}function q(a){if("string"!=typeof a&&"number"!=typeof a)throw new TypeError("Key name must be string or numeric");if("__jstorage_meta"==a)throw new TypeError("Reserved key name");
return!0}function x(){var a,b,l,k,d=Infinity,n=!1,e=[];clearTimeout(G);if(c.__jstorage_meta&&"object"==typeof c.__jstorage_meta.TTL){a=+new Date;l=c.__jstorage_meta.TTL;k=c.__jstorage_meta.CRC32;for(b in l)l.hasOwnProperty(b)&&(l[b]<=a?(delete l[b],delete k[b],delete c[b],n=!0,e.push(b)):l[b]<d&&(d=l[b]));Infinity!=d&&(G=setTimeout(x,Math.min(d-a,2147483647)));n&&(w(),v(),s(e,"deleted"))}}function E(){var a;if(c.__jstorage_meta.PubSub){var b,l=A,k=[];for(a=c.__jstorage_meta.PubSub.length-1;0<=a;a--)b=
c.__jstorage_meta.PubSub[a],b[0]>A&&(l=b[0],k.unshift(b));for(a=k.length-1;0<=a;a--){b=k[a][1];var d=k[a][2];if(t[b])for(var n=0,e=t[b].length;n<e;n++)try{t[b][n](b,p.parse(p.stringify(d)))}catch(g){}}A=l}}var y=window.jQuery||window.$||(window.$={}),p={parse:window.JSON&&(window.JSON.parse||window.JSON.decode)||String.prototype.evalJSON&&function(a){return String(a).evalJSON()}||y.parseJSON||y.evalJSON,stringify:Object.toJSON||window.JSON&&(window.JSON.stringify||window.JSON.encode)||y.toJSON};if("function"!==
typeof p.parse||"function"!==typeof p.stringify)throw Error("No JSON support found, include //cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js to page");var c={__jstorage_meta:{CRC32:{}}},h={jStorage:"{}"},g=null,z=0,f=!1,m={},F=!1,r=0,t={},A=+new Date,G,B={isXML:function(a){return(a=(a?a.ownerDocument||a:0).documentElement)?"HTML"!==a.nodeName:!1},encode:function(a){if(!this.isXML(a))return!1;try{return(new XMLSerializer).serializeToString(a)}catch(b){try{return a.xml}catch(c){}}return!1},
decode:function(a){var b="DOMParser"in window&&(new DOMParser).parseFromString||window.ActiveXObject&&function(a){var b=new ActiveXObject("Microsoft.XMLDOM");b.async="false";b.loadXML(a);return b};if(!b)return!1;a=b.call("DOMParser"in window&&new DOMParser||window,a,"text/xml");return this.isXML(a)?a:!1}};y.jStorage={version:"0.4.12",set:function(a,b,l){q(a);l=l||{};if("undefined"==typeof b)return this.deleteKey(a),b;if(B.isXML(b))b={_is_xml:!0,xml:B.encode(b)};else{if("function"==typeof b)return;
b&&"object"==typeof b&&(b=p.parse(p.stringify(b)))}c[a]=b;for(var k=c.__jstorage_meta.CRC32,d=p.stringify(b),g=d.length,e=2538058380^g,h=0,f;4<=g;)f=d.charCodeAt(h)&255|(d.charCodeAt(++h)&255)<<8|(d.charCodeAt(++h)&255)<<16|(d.charCodeAt(++h)&255)<<24,f=1540483477*(f&65535)+((1540483477*(f>>>16)&65535)<<16),f^=f>>>24,f=1540483477*(f&65535)+((1540483477*(f>>>16)&65535)<<16),e=1540483477*(e&65535)+((1540483477*(e>>>16)&65535)<<16)^f,g-=4,++h;switch(g){case 3:e^=(d.charCodeAt(h+2)&255)<<16;case 2:e^=
(d.charCodeAt(h+1)&255)<<8;case 1:e^=d.charCodeAt(h)&255,e=1540483477*(e&65535)+((1540483477*(e>>>16)&65535)<<16)}e^=e>>>13;e=1540483477*(e&65535)+((1540483477*(e>>>16)&65535)<<16);k[a]="2."+((e^e>>>15)>>>0);this.setTTL(a,l.TTL||0);s(a,"updated");return b},get:function(a,b){q(a);return a in c?c[a]&&"object"==typeof c[a]&&c[a]._is_xml?B.decode(c[a].xml):c[a]:"undefined"==typeof b?null:b},deleteKey:function(a){q(a);return a in c?(delete c[a],"object"==typeof c.__jstorage_meta.TTL&&a in c.__jstorage_meta.TTL&&
delete c.__jstorage_meta.TTL[a],delete c.__jstorage_meta.CRC32[a],w(),v(),s(a,"deleted"),!0):!1},setTTL:function(a,b){var l=+new Date;q(a);b=Number(b)||0;return a in c?(c.__jstorage_meta.TTL||(c.__jstorage_meta.TTL={}),0<b?c.__jstorage_meta.TTL[a]=l+b:delete c.__jstorage_meta.TTL[a],w(),x(),v(),!0):!1},getTTL:function(a){var b=+new Date;q(a);return a in c&&c.__jstorage_meta.TTL&&c.__jstorage_meta.TTL[a]?(a=c.__jstorage_meta.TTL[a]-b)||0:0},flush:function(){c={__jstorage_meta:{CRC32:{}}};w();v();s(null,
"flushed");return!0},storageObj:function(){function a(){}a.prototype=c;return new a},index:function(){var a=[],b;for(b in c)c.hasOwnProperty(b)&&"__jstorage_meta"!=b&&a.push(b);return a},storageSize:function(){return z},currentBackend:function(){return f},storageAvailable:function(){return!!f},listenKeyChange:function(a,b){q(a);m[a]||(m[a]=[]);m[a].push(b)},stopListening:function(a,b){q(a);if(m[a])if(b)for(var c=m[a].length-1;0<=c;c--)m[a][c]==b&&m[a].splice(c,1);else delete m[a]},subscribe:function(a,
b){a=(a||"").toString();if(!a)throw new TypeError("Channel not defined");t[a]||(t[a]=[]);t[a].push(b)},publish:function(a,b){a=(a||"").toString();if(!a)throw new TypeError("Channel not defined");c.__jstorage_meta||(c.__jstorage_meta={});c.__jstorage_meta.PubSub||(c.__jstorage_meta.PubSub=[]);c.__jstorage_meta.PubSub.unshift([+new Date,a,b]);w();v()},reInit:function(){C()},noConflict:function(a){delete window.$.jStorage;a&&(window.jStorage=this);return this}};(function(){var a=!1;if("localStorage"in
window)try{window.localStorage.setItem("_tmptest","tmpval"),a=!0,window.localStorage.removeItem("_tmptest")}catch(b){}if(a)try{window.localStorage&&(h=window.localStorage,f="localStorage",r=h.jStorage_update)}catch(c){}else if("globalStorage"in window)try{window.globalStorage&&(h="localhost"==window.location.hostname?window.globalStorage["localhost.localdomain"]:window.globalStorage[window.location.hostname],f="globalStorage",r=h.jStorage_update)}catch(k){}else if(g=document.createElement("link"),
g.addBehavior){g.style.behavior="url(#default#userData)";document.getElementsByTagName("head")[0].appendChild(g);try{g.load("jStorage")}catch(d){g.setAttribute("jStorage","{}"),g.save("jStorage"),g.load("jStorage")}a="{}";try{a=g.getAttribute("jStorage")}catch(m){}try{r=g.getAttribute("jStorage_update")}catch(e){}h.jStorage=a;f="userDataBehavior"}else{g=null;return}D();x();"localStorage"==f||"globalStorage"==f?"addEventListener"in window?window.addEventListener("storage",u,!1):document.attachEvent("onstorage",
u):"userDataBehavior"==f&&setInterval(u,1E3);E();"addEventListener"in window&&window.addEventListener("pageshow",function(a){a.persisted&&u()},!1)})()})();


/*
jSTORAGE End
 */

"use strict";

SDP.Util = (function() {
  var fs, normalizeStringPosix, path, util;
  util = {};
  fs = require('fs');
  path = require('path');
  normalizeStringPosix = function(path, allowAboveRoot) {
    var code, dots, i, j, k, l, lastSlash, ref, ref1, res, start;
    res = '';
    lastSlash = -1;
    dots = 0;
    code = void 0;
    for (i = k = 0, ref = path.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      if (i < path.length) {
        code = path.charCodeAt(i);
      } else if (code === 47) {
        break;
      } else {
        code = 47;
      }
      if (code === 47) {
        if (lastSlash === i - 1 || dots === 1) {

        } else if (lastSlash !== i - 1 && dots === 2) {
          if (res.length < 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
            if (res.length > 2) {
              start = res.length - 1;
              j = start;
              for (j = l = ref1 = start; ref1 <= 0 ? l <= 0 : l >= 0; j = ref1 <= 0 ? ++l : --l) {
                if (res.charCodeAt(j) === 47) {
                  break;
                }
              }
              if (j !== start) {
                if (j === -1) {
                  res = '';
                } else {
                  res = res.slice(0, j);
                }
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) {
            res += '/..';
          } else {
            res = '..';
          }
        } else {
          if (res.length > 0) {
            res += '/' + path.slice(lastSlash + 1, i);
          } else {
            res = path.slice(lastSlash + 1, i);
          }
        }
        lastSlash = i;
        dots = 0;
      } else if (code === 46 && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  };
  util.isString = function(obj) {
    return obj.constructor === String;
  };
  util.isArray = function(obj) {
    return obj.constructor === Array;
  };
  util.isNumber = function(obj) {
    return !isNaN(obj);
  };
  util.isInteger = function(obj) {
    return util.isNumber(obj) && Number.isInteger(obj);
  };
  util.isFloat = function(obj) {
    return util.isNumber(obj) && !Number.isInteger(obj);
  };
  util.isObject = function(obj) {
    return obj.constructor === Object;
  };
  util.isBoolean = function(obj) {
    return obj === true || obj === false;
  };
  util.isFunction = function(obj) {
    return obj.constructor === Function;
  };
  String.prototype.capitalize = function(index) {
    var halfResult;
    if (index == null) {
      index = 0;
    }
    halfResult = this.charAt(index).toUpperCase() + this.slice(index + 1);
    if (halfResult.length === this.length) {
      return halfResult;
    }
    return this.slice(0, index) + halfResult;
  };
  util.Filesystem = (function() {
    var _format, assertPath, fsys, inspect;
    fsys = {};
    inspect = require('util').inspect;
    assertPath = function(path) {
      if (typeof path !== 'string') {
        throw new TypeError('Path must be a string. Received ' + inspect(path));
      }
    };
    _format = function(sep, pathObject) {
      var base, dir;
      dir = pathObject.dir || pathObject.root;
      base = pathObject.base || ((pathObject.name || '') + (pathObject.ext || ''));
      if (!dir) {
        return base;
      }
      if (dir === pathObject.root) {
        return dir + base;
      }
      return dir + sep + base;
    };
    fsys.path = {
      resolve: function() {
        var args, cwd, resolvedAbsolute, resolvedPath;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        resolvedPath = '';
        resolvedAbsolute = false;
        cwd = void 0;
        for (var i = args.length - 1 i >= -1 && !resolvedAbsolute i--) {
					var path;
					if(i>=0) path = args[i];
					else {
						if (cwd === undefined) cwd = process.cwd();
						path = cwd;
					}
					assertPath(path);
					if(path.length === 0) continue;
					resolvedPath = path + '/' + resolvedPath;
					resolvedAbsolute = path.charCodeAt(0) is 47/*/*/);
				};
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
          if (resolvedPath.length > 0) {
            return "/" + resolvedPath;
          } else {
            return '/';
          }
        } else if (resolvedPath.length > 0) {
          return resolvedPath;
        } else {
          return '.';
        }
      },
      normalize: function(path) {
        assertPath(path);
        if (path.length === 0) {
          return '.';
        }
        const isAbsolute = path.charCodeAt(0) is 47/*/*/;
				const trailingSeparator = path.charCodeAt(path.length - 1) is 47/*/*/;
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) {
          path = '.';
        }
        if (path.length === 0 && trailingSeparator) {
          path += '/';
        }
        if (isAbsolute) {
          return "/" + path;
        }
        return path;
      },
      isAbsolute: function(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47;
      },
      join: function() {
        var arg, args, i, joined, k, len;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (args.length === 0) {
          return '.';
        }
        joined = void 0;
        for (arg = k = 0, len = args.length; k < len; arg = ++k) {
          i = args[arg];
          assertPath(arg);
          if (joined === void 0) {
            joined = arg;
          } else {
            joined += joined + "/" + arg;
          }
        }
        if (joined === void 0) {
          return '.';
        }
        return fsys.path.normalize(joined);
      },
      relative: function(from, to) {
        var fromCode, fromEnd, fromLen, fromStart, i, k, l, lastCommonSep, length, out, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, toCode, toEnd, toLen, toStart, u;
        assertPath(from);
        assertPath(to);
        if (from === to) {
          return '';
        }
        from = fsys.path.resolve(from);
        to = fsys.path.resolve(to);
        if (from === to) {
          return '';
        }
        fromStart = 1;
        for (fromStart = k = ref = fromStart, ref1 = from.length; ref <= ref1 ? k <= ref1 : k >= ref1; fromStart = ref <= ref1 ? ++k : --k) {
          if (from.charCodeAt(fromStart) !== 47) {
            break;
          }
        }
        fromEnd = from.length;
        fromLen = fromEnd - fromStart;
        toStart = 1;
        for (toStart = l = ref2 = toStart, ref3 = to.length; ref2 <= ref3 ? l <= ref3 : l >= ref3; toStart = ref2 <= ref3 ? ++l : --l) {
          if (to.charCodeAt(toStart) !== 47) {
            break;
          }
        }
        toEnd = to.length;
        toLen = toEnd - toStart;
        length = fromLen < toLen ? fromLen : toLen;
        lastCommonSep = -1;
        i = 0;
        for (i = q = ref4 = i, ref5 = length; ref4 <= ref5 ? q <= ref5 : q >= ref5; i = ref4 <= ref5 ? ++q : --q) {
          if (i === length) {
            if (toLen > length) {
              if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
                to.slice(toStart + i);
              }
            } else if (fromLen > length) {
              if (from.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
                lastCommonSep = 0;
              }
            }
            break;
          }
          fromCode = from.charCodeAt(fromStart + i);
          toCode = to.charCodeAt(toStart + i);
          if (fromCode !== toCode) {
            break;
          } else if (fromCode === 47) {
            lastCommonSep = i;
          }
        }
        out = '';
        for (i = u = ref6 = fromStart + lastCommonSep + 1, ref7 = fromEnd; ref6 <= ref7 ? u <= ref7 : u >= ref7; i = ref6 <= ref7 ? ++u : --u) {
          if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) {
              out += '..';
            } else {
              out += '/..';
            }
          }
        }
        if (out.length > 0) {
          return out + to.slice(toStart + lastCommonSep);
        } else {
          toStart += lastCommonSep;
          if (to.charCodeAt(toStart) === 47) {
            ++toStart;
          }
          return to.slice(toStart);
        }
      },
      dirname: function(path) {
        var code, end, hasRoot, i, k, matchedSlash, ref;
        assertPath(path);
        if (path.length === 0) {
          return '.';
        }
        code = path.charCodeAt(0);
        hasRoot = code === 47;
        end = -1;
        matchedSlash = true;
        for (i = k = ref = path.length - 1; ref <= 1 ? k <= 1 : k >= 1; i = ref <= 1 ? ++k : --k) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            } else {
              matchedSlash = false;
            }
          }
        }
        if (end === -1) {
          if (hasRoot) {
            return '/';
          }
        } else {
          '.';
        }
        if (hasRoot && end === 1) {
          return '//';
        }
        return path.slice(0, end);
      },
      basename: function(path, ext) {
        var code, end, extIdx, firstNonSlashEnd, i, k, l, matchedSlash, ref, ref1, start;
        if (ext !== void 0 && typeof ext !== 'string') {
          throw new TypeError('"ext" argument must be a string');
        }
        assertPath(path);
        start = 0;
        end = -1;
        matchedSlash = true;
        i = void 0;
        if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
          if (ext.length === path.length && ext === path) {
            return '';
          }
          extIdx = ext.length - 1;
          firstNonSlashEnd = -1;
          for (i = k = ref = path.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
            code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
              if (firstNonSlashEnd === -1) {
                matchedSlash = false;
                firstNonSlashEnd = i + 1;
              }
              if (extIdx >= 0) {
                if (code === ext.charCodeAt(extIdx)) {
                  if (--extIdx === -1) {
                    end = i;
                  }
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
          if (start === end) {
            end = firstNonSlashEnd;
          } else if (end === -1) {
            end = path.length;
          }
          return path.slice(start, end);
        } else {
          for (i = l = ref1 = path.length - 1; ref1 <= 0 ? l <= 0 : l >= 0; i = ref1 <= 0 ? ++l : --l) {
            if (path.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1) {
            return '';
          }
          return path.slice(start, end);
        }
      },
      extname: function(path) {
        var code, end, i, k, matchedSlash, preDotState, ref, startDot, startPart;
        assertPath(path);
        startDot = -1;
        startPart = 0;
        end = -1;
        matchedSlash = true;
        preDotState = 0;
        for (i = k = ref = path.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1) {
              startDot = i;
            } else if (preDotState !== 1) {
              preDotState = 1;
            }
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {
          return '';
        }
        return path.slice(startDot, end);
      },
      format: function(pathObject) {
        if (pathObject === null || typeof pathObject !== 'object') {
          throw new TypeError("Parameter 'pathObject' must be an object, not " + (typeof pathObject));
        }
        return _format('/', pathObject);
      },
      parse: function(path) {
        var code, end, i, isAbsolute, k, matchedSlash, preDotState, ref, ref1, ret, start, startDot, startPart;
        assertPath(path);
        ret = {
          root: '',
          dir: '',
          base: '',
          ext: '',
          name: ''
        };
        if (path.length === 0) {
          return ret;
        }
        code = path.charCodeAt(0);
        isAbsolute = code === 47;
        start = void 0;
        if (isAbsolute) {
          ret.root = '/';
          start = 1;
        } else {
          start = 0;
        }
        startDot = -1;
        startPart = 0;
        end = -1;
        matchedSlash = true;
        i = path.length - 1;
        preDotState = 0;
        for (i = k = ref = path.length - 1, ref1 = start; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1) {
              startDot = i;
            } else if (preDotState !== 1) {
              preDotState = 1;
            }
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {
          if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
              ret.base = ret.name = path.slice(1, end);
            } else {
              ret.base = ret.name = path.slice(startPart, end);
            }
          }
        } else {
          if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
          } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
          }
          ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) {
          ret.dir = path.slice(0, startPart - 1);
        } else if (isAbsolute) {
          ret.dir = '/';
        }
        return ret;
      },
      sep: '/',
      delimiter: ':',
      win32: null,
      posix: null
    };
    fsys.cwd = function() {
      return PlatformShim.getScriptPath(true);
    };
    fsys.walk = function(dir, finish) {
      var results;
      results = [];
      return fs.readdir(p.get(), function(err, files) {
        var pending;
        if (err) {
          return finsh(err);
        }
        pending = files.length;
        if (!pending) {
          return finish(null, results);
        }
        return files.forEach(function(file) {
          file = fsys.path.resolve(dir, file);
          return fs.stat(file, function(err, stat) {
            if (stat && stat.isDirectory()) {
              return walk(file, function(err, res) {
                results = results.concat(res);
                if (!--pending) {
                  return finish(null, results);
                }
              });
            } else {
              results.push(file);
              if (!--pending) {
                return finish(null, results);
              }
            }
          });
        });
      });
    };
    fsys.readJSONFile = function(p) {
      var result;
      if (p.constructor !== util.Path) {
        p = new fsys.Path(path);
      }
      if (p.isDirectory()) {
        throw new TypeError("SDP.Util.Filesystem.readJSONFile can not operate on directories");
      }
      if (p.extname() !== '.json') {
        throw new TypeError("SDP.Util.Filesystem.readJSONFile only operates on JSON files");
      }
      result = null;
      fs.readFile(p.get(), function(err, data) {
        if (err) {
          util.Logger.alert(err);
        }
        return result = JSON.parse(data);
      });
      return result;
    };
    fsys.readJSONDirectory = function(p, callback) {
      if (p.constructor !== util.Path) {
        p = new fsys.Path(path);
      }
      if (!p.isDirectory()) {
        throw new TypeError("SDP.Util.Filesystem.readJSONDirectory can not operate on just files");
      }
      return fsys.walk(p.get(), function(err, files) {
        var results;
        if (err) {
          util.Logger.alert(err);
        }
        results = [];
        files.forEach(function(file) {
          var json, pa;
          pa = new fsys.Path(file);
          json = fsys.readJSONFile(pa);
          if (pa.extname() === '.json') {
            results.push(json);
          }
          if (util.isFunction(callback)) {
            return callback(json);
          }
        });
        return results;
      });
    };
    fsys.registerJSONFile = function(p) {
      if (p.constructor !== util.Path) {
        p = new fsys.Path(path);
      }
      if (p.isDirectory()) {
        throw new TypeError("SDP.Util.Filesystem.registerJSONFile can not operate on directories");
      }
      if (p.extname() !== '.json') {
        throw new TypeError("SDP.Util.Filesystem.registerJSONFile only operates on JSON files");
      }
      return util.registerJSONObject(fsys.readJSONFile(p));
    };
    fsys.registerJSONDirectory = function(p) {
      if (p.constructor !== util.Path) {
        p = new fsys.Path(path);
      }
      if (!p.isDirectory()) {
        throw new TypeError("SDP.Util.Filesystem.registerJSONDirectory can only operate on directories");
      }
      return fsys.readJSONDirectory(p, function(json) {
        return util.registerJSONObject(json);
      });
    };
    fsys.Path = (function() {
      function Path(uri) {
        if (util.isObject(uri)) {
          uri = fsys.path.format(uri);
        }
        if (uri === void 0) {
          uri = fsys.cwd();
        }
        fsys.Path.check(uri);
        this.get = function() {
          fsys.Path.check(uri);
          return uri;
        };
      }

      Path.check = function(uri) {
        if (fsys.path.isAbsolute(uri)) {
          throw new TypeError("SDP's Path may not store absolute paths");
        }
        if (!fsys.path.resolve(uri).startsWith(fsys.cwd())) {
          throw new TypeError("SDP's Path may not leave the current working directory");
        }
      };

      Path.prototype.cd = function(to) {
        var uri;
        uri = fsys.path.resolve(this.get(), to);
        fsys.Path.check(uri);
        return this.get = function() {
          fsys.Path.check(uri);
          return uri;
        };
      };

      Path.prototype.basename = function(ext) {
        return fsys.path.basename(this.get(), ext);
      };

      Path.prototype.dirname = function() {
        return fsys.path.dirname(this.get());
      };

      Path.prototype.extname = function() {
        return fsys.path.extname(this.get());
      };

      Path.prototype.parse = function() {
        return fsys.path.parse(this.get());
      };

      Path.prototype.isFile = function() {
        return fs.lstatSync(this.get()).isFile();
      };

      Path.prototype.isDirectory = function() {
        return fs.lstatSync(this.get()).isDirectory();
      };

      Path.prototype.convert = function() {
        return this.get();
      };

      return Path;

    })();
    return fsys;
  })();
  util.registerJSONObject = function(item) {
    var func;
    if (!util.isString(item.objectType)) {
      throw new TypeError("SDP.Util.registerJSONObject can not work on items that don't contain an objectType field");
    }
    func = SDP.Functional["add" + (item.objectType.capitalize()) + "Item"];
    if (!func) {
      util.Logger.alert("SDP.Util.registerJSONObject could not find the function for objectType " + item.objectType);
      return;
    }
    return func(item);
  };
  util.getOverridePositions = function(genre, category) {
    var c, ci, g, i, k, l, len, len1, ref, ref1;
    genre = genre.replace(/\s/g, "");
    category = category.replace(/\s/g, "");
    ref = SDP.Constants.Genre;
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      g = ref[i];
      if (genre === g) {
        if (category === null) {
          return [i];
        }
        ref1 = SDP.Constants.ResearchCategory;
        for (ci = l = 0, len1 = ref1.length; l < len1; ci = ++l) {
          c = ref1[ci];
          if (c === category) {
            return [i, ci];
          }
        }
        break;
      }
    }
    return void 0;
  };
  util.fixItemNaming = function(item, originalName, fixName) {
    if (item[originalName] != null) {
      item[fixName] = item[originalName];
      item[originalName] = void 0;
    }
    return item;
  };
  util.Image = (function() {
    function Image(uri1) {
      this.uri = uri1;
      if (!util.isString(this.uri)) {
        this.uri = null;
      }
    }

    Image.prototype.exists = function() {
      var doesExist;
      if (this.uri === null) {
        return false;
      }
      doesExist = true;
      fs.access(this.uri, fs.constants.F_OK, function(err) {
        if (err) {
          return doesExist = false;
        }
      });
      return doesExist;
    };

    return Image;

  })();
  util.Weight = (function() {
    function Weight(w1, w2, w3, w4, w5, w6) {
      var i, k, len, num, ref;
      if (w1 == null) {
        w1 = 0.8;
      }
      if (w2 == null) {
        w2 = w1;
      }
      if (w3 == null) {
        w3 = w2;
      }
      if (w5 == null) {
        w5 = w4;
      }
      if (w6 == null) {
        w6 = w5;
      }
      if (w1 === true || (!util.isNumber(w1) && !util.isArray(w1))) {
        this.arr = [0.8, 0.8, 0.8];
      } else if (w1 === false) {
        this.arr = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8];
      } else {
        if (util.isArray(w1)) {
          if (w1.length > 3) {
            while (w1.length < 6) {
              w1.push(w1.last());
            }
          } else {
            while (w1.length < 3) {
              w1.push(w1.last());
            }
          }
          this.arr = w1;
        } else {
          this.arr = [w1, w2, w3];
          if (w4) {
            this.arr.push(w4, w5, w6);
          }
        }
        ref = this.arr;
        for (i = k = 0, len = ref.length; k < len; i = ++k) {
          num = ref[i];
          if (num > 1) {
            this.arr[i] = num / 100;
          }
        }
      }
      this.isGenre = function() {
        return this.arr.length === 6;
      };
      this.isAudience = function() {
        return this.arr.length === 3;
      };
    }

    Weight.prototype.get = function(index) {
      if (index === null) {
        return this.arr;
      }
      return this.arr[index];
    };

    Weight.prototype.convert = function() {
      return new Array(this.arr);
    };

    return Weight;

  })();
  util.Date = (function() {
    var END, START;

    START = '1/1/1';

    END = '260/12/4';

    function Date(y, m, w) {
      var ref, ref1, ref2, ref3;
      if (y == null) {
        y = 1;
      }
      if (util.isString(y)) {
        ref = m.split('/'), y = ref[0], m = ref[1], w = ref[2];
        if (util.isString(y)) {
          ref1 = m.split(' '), y = ref1[0], m = ref1[1], w = ref1[2];
        }
      }
      if (y === true) {
        ref2 = END.split('/'), y = ref2[0], m = ref2[1], w = ref2[2];
      }
      if (y === false) {
        ref3 = START.split('/'), y = ref3[0], m = ref3[1], w = ref3[2];
      }
      if (m === void 0) {
        m = y;
      }
      if (w === void 0) {
        w = m;
      }
      this.string = y + "/" + m + "/" + w;
    }

    Date.prototype.convert = function() {
      return new String(this.string);
    };

    return Date;

  })();
  util.Error = (function() {
    var Error;
    Error = {
      logs: []
    };
    (function() {
      var saving, update;
      update = false;
      saving = false;
      return Error.save = function() {
        var json;
        if (!saving) {
          json = JSON.stringify(Error.logs);
          saving = true;
          return DataStore.saveToSlotAsync("SDP.Util.Error.logs", json, function() {
            saving = false;
            if (update) {
              update = false;
              return Error.save();
            }
          }, function(m) {
            return saving = false;
          });
        } else {
          return update = true;
        }
      };
    })();
    Error.addErrorLog = function(level, message, error) {
      if (!error) {
        error = {};
      }
      Error.logs.push({
        date: (new Date()).toISOString(),
        level: level,
        msg: message,
        errorMsg: error.message,
        stacktrace: e.stack,
        number: e.number
      });
      if (Error.logs.length > 100) {
        Error.logs.splice(0, errorLogs.length - 100);
      }
      return Error.save();
    };
    return Error;
  })();
  util.Logger = (function() {
    var createTimestamp, logger, stream, utilRequire;
    utilRequire = require('util');
    logger = {
      enabled: true,
      enableAlerts: true,
      formatter: logger.printf,
      show: 200,
      levels: {},
      addLevel: function(level, weight, sty, prefix) {
        if (prefix == null) {
          prefix = level;
        }
        if (sty.constructor === style.FormattedStyle) {
          sty = sty.getStyle();
        }
        logger.levels[level] = {
          level: level,
          prefix: prefix,
          style: sty,
          weight: weight,
          format: function() {
            var msg;
            msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return logger.format.apply(logger, [level].concat(slice.call(msg)));
          },
          formatWithTime: function() {
            var msg;
            msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return logger.formatWithTime.apply(logger, [level].concat(slice.call(msg)));
          },
          log: function() {
            var msg;
            msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return logger.log.apply(logger, [level].concat(slice.call(msg)));
          },
          alert: function() {
            var msg;
            msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return logger.alert.apply(logger, [level].concat(slice.call(msg)));
          }
        };
        if (logger[level] === void 0) {
          logger[level] = logger.levels[level].log;
        }
        if (logger[level + "Alert"] === void 0) {
          return logger[level + "Alert"] = logger.levels[level].alert;
        }
      },
      setShow: function(level) {
        if (level.constructor === Object) {
          return logger.show = level.weight;
        } else if (level.constructor === String) {
          return logger.show = logger.levels[level].weight;
        } else {
          return logger.show = level;
        }
      }
    };
    logger.addLevel('verbose', 0, {
      fg: 'blue',
      bg: 'black'
    }, 'VERBOSE');
    logger.addLevel('debug', 100, {
      fg: 'blue'
    }, 'DEBUG');
    logger.addLevel('info', 200, {
      fg: 'green'
    }, 'INFO');
    logger.addLevel('warn', 300, {
      fg: 'black',
      bg: 'yellow'
    }, 'WARN');
    logger.addLevel('error', 400, {
      fg: 'red',
      bg: 'black'
    }, 'ERROR');
    logger.addLevel('fatal', 500, {
      fg: 'red',
      bg: 'black'
    }, 'FATAL');
    stream = process.stderr;
    Object.defineProperty(logger, 'stream', {
      set: function(newStream) {
        stream = newStream;
        return style.stream = stream;
      },
      get: function() {
        return stream;
      }
    });
    createTimestamp = function(d) {
      var formatNumbers;
      formatNumbers = function(n) {
        if (n >= 0 && n < 10) {
          return "0" + n;
        } else {
          return n + "";
        }
      };
      return [[formatNumbers(d.getFullYear()), formatNumbers(d.getMonth() + 1), d.getDate()].join("-"), [formatNumbers(d.getHours()), formatNumbers(d.getMinutes()), formatNumbers(d.getHours())].join(":")].join("|");
    };
    logger.printf = {
      formatWithTime: function() {
        var level, msg, ref;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] != null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        return style.format(level.style, "[" + (createTimestamp(new Date())) + "]" + level.prefix + ": " + ((ref = str.shift()).format.apply(ref, msg)));
      },
      format: function() {
        var level, msg, ref;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] != null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        return style.format(level.style, level.prefix + ": " + ((ref = str.shift()).format.apply(ref, msg)));
      },
      log: function() {
        var level, msg, ref;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] == null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        if (logger.enabled && logger.stream && ((ref = logger.levels[level]) != null ? ref.weight : void 0) >= logger.show) {
          return logger.stream.write(logger.printf.formatWithTime(level, msg));
        }
      },
      alert: function() {
        var level, msg, ref, ref1, string;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] == null) {
          return "Level " + level + " does not exist";
        }
        if (logger.enabled && logger.enableAlerts && ((ref = logger.levels[level]) != null ? ref.weight : void 0) >= logger.show) {
          string = msg.length === 1 ? msg[0] : (ref1 = str.shift()).format.apply(ref1, msg);
          return PlatformShim.alert(string, logger.levels[level].prefix);
        }
      }
    };
    logger.format = {
      formatWithTime: function() {
        var level, msg;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] != null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        return style.format(level.style, "[" + (createTimestamp(new Date())) + "]" + level.prefix + ": " + (utilRequire.format.apply(utilRequire, msg)));
      },
      format: function() {
        var level, msg;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] != null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        return style.format(level.style, level.prefix + ": " + (utilRequire.format.apply(utilRequire, msg)));
      },
      log: function() {
        var level, msg, ref;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] == null) {
          level = logger.levels[level];
        }
        if (logger.levels.indexOf(level) === -1) {
          return "Level " + level + " does not exist";
        }
        if (logger.enabled && logger.stream && ((ref = logger.levels[level]) != null ? ref.weight : void 0) >= logger.show) {
          return logger.stream.write(logger.format.formatWithTime(level, msg));
        }
      },
      alert: function() {
        var level, msg, ref, string;
        level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (logger.levels[level] == null) {
          return "Level " + level + " does not exist";
        }
        if (logger.enabled && logger.enableAlerts && ((ref = logger.levels[level]) != null ? ref.weight : void 0) >= logger.show) {
          string = msg.length === 1 ? msg[0] : utilRequire.format.apply(utilRequire, msg);
          return PlatformShim.alert(string, logger.levels[level].prefix);
        }
      }
    };
    logger.formatWithTime = function() {
      var level, msg, ref;
      level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = logger.formatter).formatWithTime.apply(ref, [level].concat(slice.call(msg)));
    };
    logger.format = function() {
      var level, msg, ref;
      level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = logger.formatter).format.apply(ref, [level].concat(slice.call(msg)));
    };
    logger.log = function() {
      var level, msg, ref;
      level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = logger.formatter).log.apply(ref, [level].concat(slice.call(msg)));
    };
    logger.alert = function() {
      var level, msg, ref;
      level = arguments[0], msg = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = logger.formatter).alert.apply(ref, [level].concat(slice.call(msg)));
    };
    return logger;
  })();
  util.Check = (function() {
    var Check;
    Check = {
      usePopups: true
    };
    Check.error = function(msg) {
      var e;
      try {
        throw new Error(msg);
      } catch (error1) {
        e = error1;
        if (Checks.usePopups) {
          util.Logger.errorAlert(msg, e);
        } else {
          util.Logger.error(msg, e);
        }
        return Error.addErrorLog("MODERROR", msg, e);
      }
    };
    Check.audienceWeightings = function(w) {
      if (!w || w.length < 3 || w.some(function(v) {
        return v < 0 || v > 1;
      })) {
        Check.error('audience weigthing is invalid: %s', w);
        return false;
      }
      return true;
    };
    Check.genreWeightings = function(w) {
      if (!w || w.length < 6 || w.some(function(v) {
        return v < 0 || v > 1;
      })) {
        Check.error('genre weigthing is invalid: %s', w);
        return false;
      }
      return true;
    };
    Check.missionOverrides = function(overrides) {
      if (overrides.length < 6 || overrides.some(function(o) {
        return o.length < 6 || o.some(function(w) {
          return w > 1 || w < 0;
        });
      })) {
        Check.error('invalid missionOverrides: %s', w);
        return false;
      }
      return true;
    };
    Check.date = function(date) {
      var v;
      if (date && date.split) {
        v = date.split('/');
        if (v && v.length === 3 && !v.some(function(t) {
          return t < 1;
        }) && v[1] <= 12 && v[2] <= 4) {
          return true;
        }
        Check.error('date invalid: %s', date);
        return false;
      }
    };
    Check.propertiesPresent = function(obj, props) {
      var k, len, p;
      if (!obj) {
        return false;
      }
      if (!props) {
        return true;
      }
      for (k = 0, len = props.length; k < len; k++) {
        p = props[k];
        if (!p || p.length < 1) {
          continue;
        }
        if (!obj.hasOwnProperty(p)) {
          Check.error('property not set on object: %s', p);
          return false;
        }
      }
      return true;
    };
    Check.uniqueness = function(obj, prop, values, ignoreErr) {
      if (values.some(function(v) {
        return v[prop] === obj[prop];
      })) {
        if (!ignoreErr) {
          Check.error('duplicate value for %s found: %s', prop, obj[prop]);
        }
        return false;
      }
      return true;
    };
    return Check;
  })();
  return util;
})();

SDP.Constants = {
  ResearchCategory: ['Engine', 'Gameplay', 'Story/Quests', 'Dialogs', 'Level Design', 'AI', 'World Design', 'Graphic', 'Sound'],
  Audience: ['young', 'everyone', 'mature'],
  Genre: ['Action', 'Adventure', 'RPG', 'Simulation', 'Strategy', 'Casual']
};

SDP.Functional = {};

SDP.Functional.addResearchItem = function(item) {
  var Checks, requirments;
  Checks = SDP.Util.Check;
  if (item.type == null) {
    item.type = 'engine';
  }
  if (item.type === 'engine' && item.engineStart) {
    item.canResearch = function() {
      return false;
    };
  }
  requirments = ['id', 'name', 'category', 'categoryDisplayName'];
  if (item.v != null) {
    requirements.push('pointsCost', 'duration', 'researchCost', 'engineCost');
  } else {
    requirements.push('v');
  }
  if (Checks.propertiesPresent(item, requirements) && Checks.uniqueness(item, 'id', SDP.GDT.Research.getAll())) {
    SDP.GDT.Research.researches.push(item);
    Research.engineItems.push(item);
  }
};

SDP.Functional.addStartResearch = function(item) {
  item.type = 'start';
  return SDP.Functional.addResearchItem(item);
};

SDP.Functional.addBasicResearch = function(item) {
  item.type = 'basic';
  return SDP.Functional.addResearchItem(item);
};

SDP.Functional.addEngineResearch = function(item) {
  item.type = 'engine';
  return SDP.Functional.addResearchItem(item);
};

SDP.Functional.addSpecialResearch = function(item) {
  item.type = 'special';
  return SDP.Functional.addResearchItem(item);
};

SDP.Functional.addPlatformItem = function(item) {
  var Checks, event, fix, k, len, point, ref;
  Checks = SDP.Util.Check;
  fix = SDP.Util.fixItemNaming;
  fix(item, 'licensePrice', 'licencePrize');
  fix(item, 'publishDate', 'published');
  fix(item, 'retireDate', 'platformRetireDate');
  fix(item, 'devCosts', 'developmentCosts');
  fix(item, 'genreWeight', 'genreWeightings');
  fix(item, 'audienceWeight', 'audienceWeightings');
  fix(item, 'marketPoints', 'marketKeyPoints');
  if (Checks.propertiesPresent(item, ['id', 'name', 'company', 'startAmount', 'unitsSold', 'licencePrize', 'published', 'platformRetireDate', 'developmentCosts', 'genreWeightings', 'audienceWeightings', 'techLevel', 'baseIconUri', 'imageDates']) && Checks.uniqueness(item, 'id', SDP.GDT.Platform.getAll()) && Checks.audienceWeightings(item.audienceWeightings) && Checks.genreWeightings(item.genreWeightings) && Checks.date(item.published) && Checks.date(item.platformRetireDate)) {
    if (item.marketKeyPoints) {
      ref = item.marketKeyPoints;
      for (k = 0, len = ref.length; k < len; k++) {
        point = ref[k];
        if (!Checks.date(point.date)) {
          return;
        }
      }
    }

    /*
    		if Checks.checkUniqueness(item.name, 'name', Companies.getAllCompanies())
    			SDP.GDT.addCompany(item.name).addPlatform(item)
    		else
     */
    SDP.GDT.Platform.platforms.push(item);
    if (item.events) {
      for (event in item.events) {
        GDT.addEvent(event);
      }
    }
  }
};

SDP.Functional.addTopicItem = function(item) {
  var Checks, fix;
  Checks = SDP.Util.Check;
  fix = SDP.Util.fixItemNaming;
  fix(item, 'genreWeight', 'genreWeightings');
  fix(item, 'audienceWeight', 'audienceWeightings');
  fix(item, 'overrides', 'missionOverrides');
  if (Checks.propertiesPresent(t, ['name', 'id', 'genreWeightings', 'audienceWeightings']) && Checks.audienceWeightings(t.audienceWeightings) && Checks.genreWeightings(t.genreWeightings) && Checks.uniqueness(t, 'id', SDP.GDT.Topic.getAll(), true)) {
    SDP.GDT.Topic.topics.push(item);
  }
};

SDP.Functional.addTopicItems = function() {
  var item, k, len, list, results1;
  list = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  if (list.length === 1) {
    list = list[0];
    if (!SDP.Util.isArray(list)) {
      return SDP.Functional.addTopicItem(list);
    }
  }
  results1 = [];
  for (k = 0, len = list.length; k < len; k++) {
    item = list[k];
    results1.push(SDP.Functional.addTopicItem(item));
  }
  return results1;
};

SDP.Functional.addResearchProjectItem = function(item) {
  var Checks;
  Checks = SDP.Util.Check;
  if (item.canResearch == null) {
    item.canResearch = (function(company) {
      return true;
    });
  }
  if (Checks.propertiesPresent(item, ['id', 'name', 'pointsCost', 'iconUri', 'description', 'targetZone']) && Checks.uniqueness(item, 'id', SDP.GDT.ResearchProject.getAll())) {
    SDP.GDT.ResearchProject.projects.push(item);
  }
};

SDP.Functional.addResearchProject = function(item) {
  return SDP.Functional.addResearchProjectItem(item);
};

SDP.Functional.addTrainingItem = function(item) {
  var Checks;
  Checks = SDP.Util.Check;
  if (!((item.canSee != null) && (item.canUse != null))) {
    item.canSee = function(staff, company) {
      return true;
    };
  }
  if (Checks.propertiesPresent(item, ['id', 'name', 'pointsCost', 'duration', 'category', 'categoryDisplayName']) && Checks.uniqueness(item, 'id', SDP.GDT.Training.getAll())) {
    SDP.GDT.Training.trainings.push(item);
  }
};

SDP.Functional.addContractItem = function(item) {
  var Checks;
  Checks = SDP.Util.Check;
  if (Checks.propertiesPresent(item, ['id', 'name', 'description', 'tF', 'dF']) && Checks.uniqueness(item, 'id', SDP.GDT.Contract.getAll())) {
    SDP.GDT.Contract.contracts.push(item);
  }
};

SDP.Functional.addPublisherItem = function(item) {
  var Checks;
  Checks = SDP.Util.Check;
  if (Checks.propertiesPresent(item, ['id', 'name']) && Checks.uniqueness(item, 'id', SDP.GDT.Publisher.getAll())) {
    SDP.GDT.Publisher.publishers.push(item);
  }
};


/*
SDP.Functional.addReviewerItem = (item) ->
	Checks = SDP.Util.Check
	if Checks.propertiesPresent(item, ['id', 'name']) and Checks.uniqueness(item, 'id', SDP.GDT.Review.getAll())
		SDP.GDT.Review.reviewer.push(item)
	return
 */

SDP.Functional.addEvent = function(event) {
  var Checks, oldTrigger;
  Checks = SDP.Util.Check;
  if (!(Checks.propertiesPresent(event, ['id']) && (event.notification || event.getNotification))) {
    return;
  }
  if (!Checks.checkUniqueness(event, 'id', GDT.Event.getAll())) {
    return;
  }
  oldTrigger = event.trigger;
  event.trigger = function(company) {
    var result;
    result = oldTrigger(company);
    if (result && (event.complete != null)) {
      this.runningCompany = company;
    }
    return result;
  };
  return GDT.Event.events.push(event);
};

SDP.Functional.addNotificationToQueue = function(item) {
  var ref;
  if (SDP.Util.isString(item)) {
    item = item.split('\n');
    if (item.length === 1) {
      item = item[0].split(':');
    }
    if (item.length === 1) {
      item = item[0].split(';');
    }
    item.forEach(function(e, i) {
      return item[i] = e.trim();
    });
    item = {
      header: item[0],
      text: item[1],
      buttonText: item[2]
    };
  }
  if (item.header == null) {
    item.header = '?';
  }
  if (item.text == null) {
    item.text = '?';
  }
  if (!item instanceof Notification) {
    item = new Notification({
      header: item.header,
      text: item.text,
      buttonText: item.buttonText,
      weeksUntilFired: item.weeksUntilFired,
      image: item.image,
      options: item.options.slice(0, 3),
      sourceId: item.sourceId
    });
  }
  if ((typeof GameManager !== "undefined" && GameManager !== null ? (ref = GameManager.company) != null ? ref.notifications : void 0 : void 0) != null) {
    return GameManager.company.notifications.push(item);
  } else {
    return SDP.GDT.Notification.queue.push(item);
  }
};

SDP.Class = (classes = {}, convertClasses = function(classObj) {
  var i;
  switch (classObj.constructor) {
    case SDP.Util.Date:
    case SDP.Util.Weight:
    case SDP.Util.Filesystem.Path:
      return classObj.convert();
    case Array:
      for (i in classObj) {
        classObj[i] = convertClasses(classObj[i]);
      }
      return classObj;
    default:
      return classObj;
  }
}, Base = (function() {
  function Base() {
    var arg, args, k, len, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (SDP.Util.isObject(args[0])) {
      ref = args[0];
      for (k = 0, len = ref.length; k < len; k++) {
        arg = ref[k];
        if (args[0].hasOwnProperty(arg)) {
          this[arg] = args[0][arg];
        }
      }
      this.wasNativeObject = true;
    } else {
      this.wasNativeObject = false;
    }
    if (this.id == null) {
      this.id = this.name;
    }
  }

  return Base;

})(), classes.Research = (function(superClass) {
  extend(Research, superClass);

  function Research(name1, type1, category1, categoryDisplayName, id1) {
    this.name = name1;
    this.type = type1;
    this.category = category1;
    this.categoryDisplayName = categoryDisplayName != null ? categoryDisplayName : this.category;
    this.id = id1;
    Research.__super__.constructor.apply(this, arguments);
  }

  Research.prototype.convert = function() {
    var item;
    return item = {
      name: this.name,
      id: this.id,
      type: this.type,
      v: this.v,
      pointsCost: this.pointsCost,
      duration: this.duration,
      researchCost: this.researchCost,
      devCost: this.devCost,
      engineCost: this.engineCost,
      enginePoints: this.enginePoints,
      category: this.category,
      categoryDisplayName: this.categoryDisplayName,
      group: this.group,
      consolePart: this.consolePart,
      engineStart: this.engineStart,
      canUse: this.canUse != null ? this.canUse.bind(item) : void 0,
      canResearch: this.canResearch != null ? this.canResearch.bind(item) : void 0
    };
  };

  return Research;

})(Base), classes.Platform = (function(superClass) {
  extend(Platform, superClass);

  function Platform(name1, company1, id1) {
    this.name = name1;
    this.company = company1;
    this.id = id1 != null ? id1 : this.name;
    Platform.__super__.constructor.apply(this, arguments);
    if (this.startAmount == null) {
      this.startAmount = 0;
    }
    if (this.unitsSold == null) {
      this.unitsSold = 0;
    }
    if (this.audienceWeight == null) {
      this.audienceWeight = new SDP.Util.Weight(true);
    }
    if (this.genreWeight == null) {
      this.genreWeight = new SDP.Util.Weight(false);
    }
    if (this.licensePrice == null) {
      this.licensePrice = 0;
    }
    if (this.publishDate == null) {
      this.publishDate = new SDP.Util.Date(false);
    }
    if (this.retireDate == null) {
      this.retireDate = new SDP.Util.Date(true);
    }
    if (this.devCost == null) {
      this.devCost = 0;
    }
    if (this.techLevel == null) {
      this.techLevel = 0;
    }
    if (this.iconUri == null) {
      this.iconUri = new SDP.Util.Filesystem.Path();
    }
  }

  Platform.prototype.convert = function() {
    return {
      name: this.name,
      id: this.id,
      company: this.company,
      startAmount: this.startAmount,
      unitsSold: this.unitsSold,
      licensePrice: this.licensePrice,
      publishDate: convertClasses(this.publishDate),
      retireDate: convertClasses(this.retireDate),
      genreWeight: convertClasses(this.genreWeight),
      audienceWeight: convertClasses(this.audienceWeight),
      techLevel: this.techLevel,
      iconUri: convertClasses(this.iconUri),
      imageDates: convertClasses(this.imageDates),
      marketPoints: convertClasses(this.marketPoints)
    };
  };

  return Platform;

})(Base), classes.Topic = (function(superClass) {
  var BASE_OVERRIDE;

  extend(Topic, superClass);

  BASE_OVERRIDE = [0, 0, 0, 0, 0, 0, 0, 0, 0];

  function Topic(name1, id1) {
    var k, len, o, ref;
    this.name = name1;
    this.id = id1;
    Topic.__super__.constructor.apply(this, arguments);
    if (this.audienceWeight == null) {
      this.audienceWeight = new SDP.Util.Weight(true);
    }
    if (this.genreWeight == null) {
      this.genreWeight = new SDP.Util.Weight(false);
    }
    if ((this.overrides == null) || !SDP.Util.isArray(this.overrides)) {
      this.overrides = [BASE_OVERRIDE, BASE_OVERRIDE, BASE_OVERRIDE, BASE_OVERRIDE, BASE_OVERRIDE, BASE_OVERRIDE];
    }
    while (this.overrides.length < 6) {
      this.overrides.push(BASE_OVERRIDE);
    }
    ref = this.overrides;
    for (k = 0, len = ref.length; k < len; k++) {
      o = ref[k];
      if (o.length < 9) {
        o.push(0);
      }
    }
  }

  Topic.prototype.setOverride = function(genreName, catName, value) {
    var catOrNull, positions;
    if (SDP.Util.isArray(genreName)) {
      this.overrides = genreName;
      return this;
    }
    if (SDP.Util.isArray(catName)) {
      value = catName;
    }
    catOrNull = value !== catName && (SDP.Util.isString(catName) || SDP.Util.isInteger(catName)) ? catName : null;
    positions = SDP.Util.getOverridePositions(genreName, catOrNull);
    if (value === catName) {
      this.overrides[positions[0]] = value;
    } else {
      this.overrides[positions[0]][positions[1]] = value;
    }
    return this;
  };

  Topic.prototype.convert = function() {
    return {
      name: this.name,
      id: this.id,
      genreWeight: convertClasses(this.genreWeight),
      audienceWeight: convertClasses(this.audienceWeight),
      overrides: this.overrides
    };
  };

  return Topic;

})(Base), classes.ResearchProject = (function(superClass) {
  extend(ResearchProject, superClass);

  function ResearchProject(name1, description, id1) {
    this.name = name1;
    this.description = description;
    this.id = id1;
    ResearchProject.__super__.constructor.apply(this, arguments);
    if (this.pointsCost == null) {
      this.pointsCost = 0;
    }
    if (this.iconUri == null) {
      this.iconUri = new SDP.Util.Filesystem.Path();
    }
    if (this.targetZone == null) {
      this.targetZone = 2;
    }
  }

  ResearchProject.prototype.convert = function() {
    var item;
    return item = {
      name: this.name,
      id: this.id,
      description: this.description,
      pointsCost: this.pointsCost,
      iconUri: convertClasses(this.iconUri),
      targetZone: this.targetZone,
      repeatable: this.repeatable,
      canResearch: this.canResearch != null ? this.canResearch.bind(item) : void 0,
      complete: this.complete != null ? this.complete.bind(item) : void 0,
      cancel: this.cancel != null ? this.cancel.bind(item) : void 0
    };
  };

  return ResearchProject;

})(Base), classes.Training = (function(superClass) {
  extend(Training, superClass);

  function Training(name1, category1, categoryDisplayName, id1) {
    this.name = name1;
    this.category = category1;
    this.categoryDisplayName = categoryDisplayName != null ? categoryDisplayName : this.category;
    this.id = id1;
    Training.__super__.constructor.apply(this, arguments);
    if (this.pointsCost == null) {
      this.pointsCost = 0;
    }
    if (this.duration == null) {
      this.duration = 0;
    }
  }

  Training.prototype.convert = function() {
    var item;
    return item = {
      name: this.name,
      id: this.id,
      cost: this.cost,
      pointsCost: this.pointsCost,
      category: this.category,
      categoryDisplayName: this.categoryDisplayName,
      canSee: this.canSee != null ? this.canSee.bind(item) : void 0,
      canUse: this.canUse != null ? this.canUse.bind(item) : void 0,
      tick: this.tick != null ? this.tick.bind(item) : void 0,
      complete: this.complete != null ? this.complete.bind(item) : void 0
    };
  };

  return Training;

})(Base), classes.Contract = (function(superClass) {
  var item;

  extend(Contract, superClass);

  function Contract(name1, size1, description, id1) {
    this.name = name1;
    this.size = size1;
    this.description = description;
    this.id = id1;
    Contract.__super__.constructor.apply(this, arguments);
    if (this.tF == null) {
      this.tF = 0;
    }
    if (this.dF == null) {
      this.dF = 0;
    }
  }

  Contract.prototype.convert = item = {
    name: Contract.name,
    id: Contract.id,
    size: Contract.size,
    description: Contract.description,
    tF: Contract.tF,
    dF: Contract.dF,
    card: Contract.card,
    generateCard: Contract.generateCard != null ? Contract.generateCard.bind(item) : void 0,
    rF: Contract.rF
  };

  return Contract;

})(Base), classes.Publisher = (function(superClass) {
  extend(Publisher, superClass);

  function Publisher(name1, id1) {
    this.name = name1;
    this.id = id1;
    Publisher.__super__.constructor.apply(this, arguments);
  }

  Publisher.prototype.convert = function() {
    var item;
    return item = {
      name: this.name,
      id: this.id,
      card: this.card,
      generateCard: this.generateCard != null ? this.generateCard.bind(item) : void 0
    };
  };

  return Publisher;

})(Base), classes.Event = (function(superClass) {
  extend(Event, superClass);

  function Event(id1, isRandomEvent) {
    this.id = id1;
    this.isRandomEvent = isRandomEvent;
    Event.__super__.constructor.apply(this, arguments);
    if (this.trigger == null) {
      this.trigger = function(company) {
        return false;
      };
    }
  }

  Event.prototype.convert = function() {
    var item;
    return item = {
      id: this.id,
      isRandomEvent: this.isRandomEvent,
      notification: this.notification,
      trigger: this.tigger.bind(item),
      getNotification: this.getNotification != null ? this.getNotification.bind(item) : void 0,
      complete: this.complete != null ? this.complete.bind(item) : void 0
    };
  };

  return Event;

})(Base))();

SDP.GDT = (function() {
  var GDT, oldResearchGetAll;
  GDT = {};
  GDT.Company = {
    companies: {},
    clientUid: void 0,
    addCompany: function(company) {
      var clientUid;
      if (!company.uid) {
        company.uid = GameManager.getGUID();
      }
      GDT.Company.companies[company.uid] = company;
      if (company === GameManager.company) {
        return clientUid = company.uid;
      }
    },
    containsCompany: function(company) {
      return companies[company.uid || company] != null;
    },
    getCompanies: function() {
      return GDT.Company.companies.slice();
    },
    getClientCompany: function() {
      return GDT.Company.companies[GDT.Company.clientUid];
    },
    getPlatformsFor: function(company, includeInactive) {
      if (includeInactive) {
        return GDT.Platform.getAll().concat(company.licencedPlatforms);
      }
      return company.availablePlatforms.concat(company.licencedPlatforms);
    },
    getByUid: function(uid) {
      return GDT.Company.companes[uid];
    }
  };
  Platforms.getPlatforms = GDT.Company.getPlatformsFor;
  oldResearchGetAll = Research.getAllItems;
  GDT.Research = {
    researches: oldResearchGetAll().forEach(function(r) {
      switch (r.category) {
        case 'General':
          r.type = 'basic';
          break;
        case 'Game Design':
        case 'Project Management':
        case 'Technology':
        case 'Publishing':
          r.type = 'special';
          break;
        default:
          r.type = 'engine';
      }
      if (r.id === 'Text Based' || r.id === '2D Graphics V1' || r.id === 'Basic Sound') {
        r.type = 'start';
      }
      if (r.id === '2D Graphics V2' || r.id === 'Linear story' || r.id === 'Savegame') {
        return r.engineStart = true;
      }
    }),
    types: ['start', 'basic', 'engine', 'special'],
    getAll: function() {
      return GDT.Research.researches.concat(oldResearchGetAll().except(GDT.Research.researches));
    },
    getAvailable: function(company, engine) {
      return GDT.Research.getAll().filter(function(r) {
        if (r.type === 'start') {
          return true;
        }
        if (engine && (engine.parts.first(function(e) {
          return e.id === r.id;
        }) != null)) {
          return true;
        }
        if (r.enginePoints === 0 && company.researchCompleted.indexOf(r) !== -1) {
          return true;
        }
        if (company.specialItems.indexOf(r) !== -1) {
          return true;
        }
        return false;
      });
    },
    getAvailableEngineParts: function(company) {
      if (company.canDevelopEngine()) {
        return GDT.Research.getAll().filter(function(r) {
          if (r.engineStart) {
            return true;
          }
          if (r.type === 'start' || r.type === 'basic') {
            return false;
          }
          return Research.getEnginePoints(r) !== 0 && (Research.getEngineCost(r) !== 0 && company.researchCompleted.indexOf(r) !== -1);
        });
      }
      return [];
    },
    addSpecialItem: function(company, idOrObj) {
      return company.specialItems.push(SDP.Util.isString(idOrObj) ? GDT.Researches.getAll().first(function(r) {
        return r.id === idOrObj;
      }) : idOrObj);
    },
    removeSpecialItem: function(company, idOrObj) {
      return company.specialItems.remove(SDP.Util.isString(idOrObj) ? GDT.Researches.getAll().first(function(r) {
        return r.id === idOrObj;
      }) : idOrObj);
    },
    getById: function(id) {
      return GDT.Research.getAll().first(function(r) {
        return r.id === id;
      });
    }
  };
  Research.getAllItems = GDT.Research.getAll;
  (function() {
    var oldResearchDevCost, oldResearchDuration, oldResearchEngineCost, oldResearchPointsCost, oldResearchResearchCost;
    oldResearchPointsCost = Research.getPointsCost;
    Research.getPointsCost = function(r) {
      if (r.pointsCost) {
        return r.pointsCost;
      }
      return oldResearchPointsCost(r);
    };
    oldResearchDuration = Research.getDuration;
    Research.getDuration = function(r) {
      if (r.duration) {
        return r.duration;
      }
      return oldResearchDuration(r);
    };
    oldResearchDevCost = Research.getDevCost;
    Research.getDevCost = function(r, game) {
      var value;
      if (r.devCost) {
        value = r.devCost;
        if (game) {
          value *= General.getGameSizeDurationFactor(game.gameSize) * General.getMultiPlatformCostFactor(game);
          value = Math.floor(value / 1e3) * 1e3;
        }
        return value;
      }
      return oldResearchDevCost(r, game);
    };
    oldResearchResearchCost = Research.getResearchCost;
    Research.getResearchCost = function(r) {
      if (r.researchCost) {
        r.researchCost;
      }
      return oldResearchResearchCost(r);
    };
    oldResearchEngineCost = Research.getEngineCost;
    return Research.getEngineCost = function(r) {
      if (r.engineCost) {
        return r.engineCost;
      }
      return oldResearchEngineCost(r);
    };
  })();
  GameManager.getAvailableGameFeatures = GDT.Research.getAvailable;
  General.getAvailableEngineParts = GDT.Research.getAvailableEngineParts;
  (function() {
    var oldPlatformImage;
    oldPlatformImage = Platforms.getPlatformImage;
    GDT.Platform = {
      platforms: Platforms.allPlatforms,
      getAll: function() {
        return GDT.Platform.platforms.slice();
      },
      getAvailable: function(company) {
        return GDT.Company.getPlatformsFor(company).filter(function(p) {
          return Platforms.getRetireDate(p) > Math.floor(company.currentWeek) && !p.isCustom || p.isCustom === true && (company.currentWeek > General.getWeekFromDateString(p.published) && !p.soldOut);
        });
      },
      getImage: function(platform, week) {
        var date, i, image, k, len, ref;
        if (platform.id === 'PC') {
          return oldPlatformImage(platform, week);
        }
        if (!platform.imageDates) {
          return platform.iconUri;
        } else if (week) {
          ref = platform.imageDates;
          for (i = k = 0, len = ref.length; k < len; i = ++k) {
            date = ref[i];
            if (General.getWeekFromDateString(date) <= week && i !== 0) {
              image = "{0}/{1}-{2}.png".format(baseUri, platform.id, String(i + 1));
            }
          }
          if (!image) {
            return "{0}/{1}.png".format(baseUri, platform.id);
          } else {
            return image;
          }
        }
      },
      getById: function(id) {
        return GDT.Platform.getAll().first(function(p) {
          return p.id === id;
        });
      }
    };
    Platforms.getPlatformsOnMarket = GDT.Platform.getAvailable;
    return Platforms.getPlatformImage = GDT.Platform.getImage;
  })();
  GDT.Topic = {
    topics: Topics.topics,
    _topicBackup: JSON.parse(JSON.stringify(GDT.Topic.topics)),
    getAll: function() {
      return GDT.Topic.topics.slice();
    },
    getById: function(id) {
      return GDT.Topic.getAll().first(function(t) {
        return t.id === id;
      });
    },
    reset: function(id) {
      var index;
      index = GDT.Topic.topics.indexOf(GDT.Topic.getById(id));
      if (index !== -1) {
        return GDT.Topic.topics[index] = JSON.parse(JSON.stringify(GDT.Topic._topicBackup[index]));
      }
    }
  };
  GDT.ResearchProject = {
    projects: Research.bigProjects,
    getAll: function() {
      return GDT.ResearchProject.projects.slice();
    },
    getAvailable: function(company, zone) {
      return GDT.ResearchProject.getAll().filter(function(p) {
        return p.targetZone === zone && p.canResearch(company);
      });
    },
    getById: function(id) {
      return GDT.ResearchProject.getAll().first(function(r) {
        return r.id === id;
      });
    }
  };
  General.getAvailableProjects = GDT.ResearchProject.getAvailable;
  GDT.Training = {
    trainings: Training.getAllTrainings(),
    getAll: function() {
      var item, k, len, ref, results;
      results = [];
      ref = GDT.Training.trainings.slice();
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if ((item.id != null) && ((item.pointsCost != null) && (item.duration != null))) {
          item.isTraining = true;
          results.push(item);
        }
      }
      return results;
    },
    getAvailable: function(staff) {
      var k, len, ref, results, t;
      results = [];
      ref = GDT.Training.getAll();
      for (k = 0, len = ref.length; k < len; k++) {
        t = ref[k];
        if ((t.canSee && t.canSee(staff, staff.company) || (t.canUse == null)) || (!t.canSee && t.canUse(staff, staff.company))) {
          results.push(t);
        }
      }
      return results;
    },
    getById: function(id) {
      return GDT.Training.getAll().first(function(t) {
        return t.id === id;
      });
    }
  };
  Training.getAllTrainings = GDT.Training.getAll;
  Training.getAvailableTraining = GDT.Training.getAvailable;
  (function() {
    var smallContracts = [{
			name: "Logo Animation".localize("heading"),
			description: "Create an animation for an existing logo.".localize(),
			tF: 1,
			dF: 2.5,
			rF: 1.5
		}, {
			name: "Character Design".localize("heading"),
			description: "Design some game characters.".localize(),
			tF: 1,
			dF: 4.5,
			rF: 1.5
		}, {
			name: "Playtest".localize("heading"),
			description: "Help to playtest a game.".localize(),
			tF: 1,
			dF: 1,
			rF: 1.5
		}, {
			name: "Game Backdrops".localize("heading"),
			description: "Design some simple background graphics for a game.".localize(),
			tF: 1,
			dF: 2,
			rF: 1.5
		}, {
			name: "Setup Computers".localize("heading"),
			description: "Install Mirconoft BOSS on computers".localize(),
			tF: 2,
			dF: 0.4
		}, {
			name: "Debug program".localize("heading"),
			description: "Help debugging a convoluted BASE program.".localize(),
			tF: 2,
			dF: 0.2
		}, {
			name: "Spritesheet Software".localize("heading"),
			description: "Our staff needs to be taught how to use these modern technologies.".localize(),
			tF: 3,
			dF: 2
		}, {
			name: "Library Software".localize("heading"),
			description: "Develop a simple library management system".localize(),
			tF: 5,
			dF: 1
		}];
		var mediumContracts = [{
			name: "Usability Study".localize("heading"),
			description: "Perform a detailed usability study.".localize(),
			tF: 5,
			dF: 6.5
		}, {
			name: "Review Game Concept".localize("heading"),
			description: "Review a game concept using your expertise.".localize(),
			tF: 3,
			dF: 8,
			rF: 1.5
		}, {
			name: "Game Art".localize("heading"),
			description: "Help out on a project with some game art".localize(),
			tF: 5,
			dF: 6,
			rF: 1.5
		}, {
			name: "Clean up database".localize("heading"),
			description: "Should one table really have 200 columns? Probably not.".localize(),
			tF: 5,
			dF: 1
		}, {
			name: "Accounting Software".localize("heading"),
			description: "Develop a simple accounting software. Are those ever simple?".localize(),
			tF: 5,
			dF: 1
		}, {
			name: "Time Tracking".localize("heading"),
			description: "Design and develop a time tracking system.".localize(),
			tF: 3,
			dF: 1
		}, {
			name: "Design a board game".localize("heading"),
			description: "Let's see how your skills translate to traditional games.".localize(),
			dF: 5,
			tF: 0.2,
			rF: 2
		}, {
			name: "Horoscope Generator".localize("heading"),
			description: "Making up horoscopes is hard work. We want it automated.".localize(),
			dF: 5,
			tF: 1
		}, {
			name: "Character Dialogues".localize("heading"),
			description: "Improve our character dialogues.".localize(),
			dF: 5,
			tF: 1,
			rF: 1.4
		}, {
			name: "Futuristic Application".localize("heading"),
			description: "We need an application that looks futuristic for a movie.".localize(),
			dF: 3,
			tF: 2,
			rF: 1.5
		}, {
			name: "Vacuum Robot".localize("heading"),
			description: "Create a revolutionary AI for a vacuum robot".localize(),
			tF: 2,
			dF: 1.4
		}, {
			name: "Website".localize("heading"),
			description: "We just heard of this thing called internet. We want to have one.".localize(),
			tF: 2,
			dF: 1.3
		}];
		var largeContracts = [{
			name: "Game Port".localize("heading"),
			description: "Port a game to a different platform.".localize(),
			tF: 3.2,
			dF: 1.7,
			rF: 1.2
		}, {
			name: "Cut Scenes".localize("heading"),
			description: "Deliver professional cut scenes for a game.".localize(),
			tF: 1,
			dF: 1,
			rF: 1.5
		}, {
			name: "Space Shuttle".localize("heading"),
			description: "Deliver part of the space shuttle control software.".localize(),
			tF: 3,
			dF: 2
		}, {
			name: "Alien Search".localize("heading"),
			description: "Optimize our search for alien life forms using advanced AI techniques.".localize(),
			tF: 3,
			dF: 1.8,
			rF: 1.3
		}, {
			name: "Movies".localize("heading"),
			description: "We need your skills in our latest blockbuster production.".localize(),
			tF: 1,
			dF: 1,
			rF: 1.5
		}];
    var generateConvertContracts;
    GDT.Contract = {
      contracts: [],
      getAll: function() {
        return GDT.Contract.contracts.slice();
      },
      getAvailable: function(company) {
        var c, k, len, ref, results;
        results = [];
        ref = GDT.Contract.getAll().filter(function(contract) {
          return (contract.isAvailable == null) || contract.isAvailable(company);
        });
        for (k = 0, len = ref.length; k < len; k++) {
          c = ref[k];
          results.push(c);
        }
        return results;
      },
      getSettings: function(company, size) {
        var key, settings;
        key = "contracts" + size;
        settings = company.flags[key];
        if (!settings) {
          settings = {
            id: key
          };
          company.flags[key] = settings;
        }
        return settings;
      },
      getSeed: function(settings) {
        var newSeed;
        newSeed = function() {
          settings.seed = Math.floor(Math.random() * 65535);
          settings.expireBy = GameManager.gameTime + 24 * GameManager.SECONDS_PER_WEEK * 1e3;
          return settings.contractsDone = [];
        };
        if (!settings.seed) {
          newSeed();
          settings.intialSettings = true;
        } else if (settings.expireBy <= GameManager.gameTime) {
          newSeed();
          settings.intialSettings = false;
        }
        return settings.seed;
      },
      createFromTemplate: function(company, template, random) {
        var d, dF, item, minPoints, pay, penalty, pointPart, points, r, t, tF, weeks;
        item = template.generateCard != null ? template.generateCard(company, random) : template.card;
        r = random.random();
        if (random.random > 0.8) {
          r += random.random();
        }
        t = void 0;
        d = void 0;
        pay = void 0;
        weeks = void 0;
        penalty = void 0;
        if (item.techPoints) {
          t = item.techPoints;
        }
        if (item.designPoints) {
          d = item.designPoints;
        }
        if (item.payment) {
          pay = item.payment;
        }
        if (item.weeks) {
          weeks = item.weeks;
        }
        if (item.penalty) {
          penalty = item.penalty;
        }
        if (!(t && d && pay && weeks && penalty)) {
          minPoints = void 0;
          tF = template.tF || item.tF;
          dF = template.dF || item.dF;
          if (!(t && d && !item.minPoints)) {
            minPoints = item.minPoints;
          } else {
            minPoints = (function() {
              switch (template.size) {
                case 'small':
                  return 11;
                case 'medium':
                  return 30;
                case 'large':
                  return 100;
              }
            })();
            if (minPoints === 12 && company.staff.length > 2) {
              minPoints += 6;
            }
            minPoints += minPoints * (company.getCurrentDate().year / 25);
          }
          points = minPoints + minPoints * r;
          pointPart = points / (dF + tF);
          if (!d) {
            d = pointPart * dF;
            d += d * 0.2 * random.random() * random.randomSign();
            d = Math.floor(d);
          }
          if (!t) {
            t = pointPart * tF;
            t += t * 0.2 * random.random() * random.randomSign();
            t = Math.floor(t);
          }
          if (!pay) {
            pay = Math.floor(points * 1e3 / 1e3) * 1e3;
          }
          if (!weeks) {
            weeks = template.size === small ? Math.floor(3 + 3 * random.random()) : Math.floor(3 + 7 * random.random());
          }
          if (!penalty) {
            penalty = Math.floor((pay * 0.2 + pay * 0.3 * random.random()) / 1e3) * 1e3;
          }
        }
        return {
          name: template.name,
          description: template.description,
          id: 'genericContracts',
          requiredD: d,
          requiredT: t,
          spawnedD: 0,
          spawnedT: 0,
          payment: pay,
          penalty: -penalty,
          weeksToFinish: weeks,
          rF: template.rF,
          isGeneric: true,
          size: template.size
        };
      },
      generate: function(company, size, max) {
        var contractInstance, count, i, item, random, results, set, settings;
        settings = GDT.Contract.getSettings(company, size);
        random = new MersenneTwister(GDT.Contract.getSeed(settings));
        count = Math.max(max - 1, Math.floor(random.random() * max));
        results = [];
        set = GDT.Contract.getAvailable(company).filter(function(e) {
          return e.size === size;
        });
        if (settings.initialSettings) {
          count = Math.max(1, count);
        }
        i = 0;
        while (i < count && set.length > 0) {
          item = set.pickRandom(random);
          set.remove(item);
          contractInstance = GDT.Contract.createFromTemplate(company, item, random);
          contractInstance.index = i;
          if (settings.contractsDone && settings.contractsDone.indexOf(i) !== -1) {
            contract.skip = true;
          }
          contracts.push(contract);
          i++;
        }
        return contracts;
      },
      getList: function(company) {
        var results, settings;
        settings = GDT.Contract.getSettings(company, 'small');
        results = GDT.Contract.generate(company, 'small', 4);
        if (company.flags.mediumContractsEnabled) {
          results.addRange(GDT.Contract.generate(company, 'medium', 3));
        }
        if (company.flags.largeContractsEnabled) {
          results.addRange(GDT.Contract.generate(company, 'large', 2));
        }
        return results.shuffle(new MersenneTwister(GDT.Contract.getSeed(settings))).filter(function(c) {
          return !c.skip;
        });
      },
      getById: function(id) {
        return GDT.Contract.getAll().first(function(c) {
          return c.id === id;
        });
      }
    };
    generateConvertContracts = function(type) {
      return function(e) {
        e.size = type;
        return e.id = e.name.replace(' ', '');
      };
    };
    smallContracts.forEach(generateConvertContracts('small'));
    mediumContracts.forEach(generateConvertContracts('medium'));
    largeContracts.forEach(generateConvertContracts('large'));
    GDT.Contract.contracts.addRange(smallContracts);
    GDT.Contract.contracts.addRange(mediumContracts);
    GDT.Contract.contracts.addRange(largeContracts);
    return ProjectContracts.generateContracts.getContract = GDT.Contract.getList;
  })();
  (function() {
    var publishers = [{
			id: "ActiveVisionaries",
			name: "Active Visionaries"
		}, {
			id: "ea",
			name: "Electronic Mass Productions"
		}, {
			id: "RockvilleSoftworks",
			name: "Rockville Softworks"
		}, {
			id: "BlueBitGames",
			name: "Blue Bit Games"
		}, {
			id: "CapeCom",
			name: "CapeCom"
		}, {
			id: "Codemeisters",
			name: "Codemeisters"
		}, {
			id: "DeepPlatinum",
			name: "Deep Platinum"
		}, {
			id: "InfroGames",
			name: "InfroGames"
		}, {
			id: "LoWoodProductions",
			name: "LoWood Productions"
		}, {
			id: "TGQ",
			name: "TGQ"
		}, {
			id: "\u00dcberSoft",
			name: "\u00dcberSoft"
		}];
    return GDT.Publisher = {
      publishers: publishers.slice(),
      getAll: function() {
        return GDT.Publisher.publishers.slice();
      },
      getAvailable: function(company) {
        var k, len, p, ref, results;
        results = [];
        ref = GDT.Publisher.getAll().filter(function(publisher) {
          return (publisher.isAvailable == null) || publisher.isAvailable(company);
        });
        for (k = 0, len = ref.length; k < len; k++) {
          p = ref[k];
          results.push(p);
        }
        return results;
      },
      generate: function(company, max) {
        var allPlatforms, audience, audiences, basePay, count, diffculty, excludes, genre, i, item, k, lastGame, minScore, name, name1, pay, penalty, platform, platforms, puName, pubName, pubObject, publisher, random, ref, researchedTopics, results, royaltyRate, seed, settings, size, sizeBasePay, sizes, topic, topics;
        settings = GDT.Contract.getSettings(company, size);
        seed = GDT.Contract.getSeed(settings);
        random = new MersenneTwister(seed);
        count = Math.max(max - 1, Math.floor(random.random() * max));
        results = [];
        if (settings.seed !== seed) {
          settings.topics = void 0;
          settings.researchedTopics = void 0;
          settings.excludes = void 0;
          settings.platforms = void 0;
        }
        if (!settings.topics || (!settings.researchedTopics || !settings.platforms)) {
          topics = company.topics.slice();
          topics.addRange(General.getTopicsAvailableForResearch(company));
          settings.topics = topics.map(function(t) {
            return t.id;
          });
          researchedTopics = company.topics.map(function(t) {
            return t.id;
          });
          settings.researchedTopics = researchedTopics;
          platforms = Platforms.getPlatformsOnMarket(company).filter(function(p) {
            return !p.isCustom && Platforms.doesPlatformSupportGameSize(p, "medium");
          });
          settings.platforms = platforms.map(function(p) {
            return p.id;
          });
          settings.excludes = [];
          lastGame = company.gameLog.last();
          if (lastGame) {
            settings.excludes.push({
              genre: lastGame.genre.id,
              topic: lastGame.topic.id
            });
          }
        } else {
          topics = settings.topics.map(function(id) {
            return Topics.topics.first(function(t) {
              return t.id === id;
            });
          });
          researchedTopics = settings.researchedTopics.map(function(id) {
            return Topics.topics.first(function(t) {
              return t.id === id;
            });
          });
          allPlatforms = Platforms.getPlatforms(company, true);
          platforms = settings.platforms.map(function(id) {
            return allPlatforms.first(function(p) {
              return p.id === id;
            });
          });
        }
        excludes = settings.excludes.slice();
        count = Math.max(max - 1, Math.floor(random.random() * max));
        if (settings.initialSetting) {
          count = Math.max(1, count);
        }
        sizes = ['medium'];
        if (company.canDevelopLargeGames()) {
          sizes.addRange(["large", "large", "large"]);
        }
        audiences = ["young", "everyone", "mature"];
        sizeBasePay = {
          medium: 15e4,
          large: 15e5 / 2
        };
        for (i = k = 0, ref = count; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          publisher = GDT.Publisher.getAvailable(company).pickRandom(random);
          if (publisher.generateCard || publisher.card) {
            item = publisher.generateCard != null ? publisher.generateCard(company) : publisher.card;
            if (item && (item.size === 'small' || (typeof company[name1 = "canDevelop" + (item.size.capitalize()) + "Games"] === "function" ? company[name1]() : void 0))) {
              topic = item.topic;
              genre = item.genre;
              platform = item.platform;
              name = (topic ? topic.name : 'Any Topic'.localize()) + " / " + (genre ? genre.name : 'Any Genre'.localize());
              results.push({
                id: 'publisherContracts',
                refNumber: Math.floor(Math.random() * 65535),
                type: 'gameContract',
                name: name,
                description: "Publisher: " + publisher.name,
                publisher: publisher.name,
                publisherObject: publisher,
                topic: topic ? topic.id : topic,
                genre: genre ? genre.id : genre,
                platform: platform.id ? platform.id : platform,
                gameSize: item.size,
                gameAudience: item.audience,
                minScore: item.minScore,
                payment: item.pay,
                penalty: item.penalty,
                royaltyRate: item.royaltyRate
              });
              continue;
            }
          }
          diffculty = 0;
          topic = void 0;
          genre = void 0;
          if (random.random() <= 0.7) {
            genre = General.getAvailableGenres(company).pickRandom(random);
            diffculty += 0.1;
          }
          if (random.random() <= 0.7) {
            do {
							if (random.random() <= 0.7)
								topic = topics.except(researchedTopics).pickRandom(random);
							else
								topic = topics.pickRandom(random);
							if (topic === undefined)
								break
						} while (excludes.some(function (e) {
							return (genre === undefined || e.genre === genre.id) && e.topic === topic.id
						}));
            if (topic != null) {
              diffculty += 0.1;
            }
          }
          if (genre || topic) {
            excludes.push({
              genre: genre ? genre.id : void 0,
              topic: topic ? topic.id : void 0
            });
          }
          platform = void 0;
          if (random.random() <= 0.7) {
            platform = platforms.pickRandom(random);
          }
          audience = void 0;
          if (company.canSetTargetAudience() && random.random() <= 0.2) {
            audience = audiences.pickRandom(random);
          }
          difficulty += 0.8 * random.random();
          minScore = 4 + Math.floor(5 * difficulty);
          size = void 0;
          do
						size = sizes.pickRandom(random);
					while (platform != undefined && !Platforms.doesPlatformSupportGameSize(platform, size));
          basePay = sizeBasePay[size];
          pay = Math.max(1, Math.floor((basePay * (minScore / 10)) / 5e3)) * 5e3;
          penalty = Math.floor((pay * 1.2 + pay * 1.8 * random.random()) / 5e3) * 5e3;
          pubObject = void 0;
          puName = void 0;
          if (platform && (platform.company && random.random() <= 0.2)) {
            pubName = platform.company;
          } else {
            pubObject = publishers.pickRandom(random);
            pubName = pubObject.name;
          }
          royaltyRate = Math.floor(7 + 8 * difficulty) / 100;
          name = (topic ? topic.name : 'Any Topic'.localize()) + " / " + (genre ? genre.name : 'Any Genre'.localize());
          if (!platform || Platforms.getPlatformsOnMarket(company).first(function(p) {
            return p.id === platform.id;
          })) {
            results.push({
              id: "publisherContracts",
              refNumber: Math.floor(Math.random() * 65535),
              type: "gameContract",
              name: name,
              description: "Publisher: {0}".localize().format(pubName),
              publisher: pubName,
              publisherObject: pubObject,
              topic: topic ? topic.id : topic,
              genre: genre ? genre.id : genre,
              platform: platform ? platform.id : void 0,
              gameSize: size,
              gameAudience: audience,
              minScore: minScore,
              payment: pay,
              penalty: penalty,
              royaltyRate: royaltyRate
            });
          } else {
            count++;
          }
        }
        return results;
      },
      getById: function(id) {
        return GDT.Publisher.getAll().first(function(p) {
          return p.id === id;
        });
      }
    };
  })();
  (function() {
    var reviewers;
    reviewers = ["Star Games", "Informed Gamer", "Game Hero", "All Games"];
    GDT.Review = {
      reviewers: reviewers.slice(),
      messages: [],
      getAll: function() {
        return GDT.Review.reviewers.slice();
      },
      getAvailable: function(company) {
        var k, len, r, ref, results;
        results = [];
        ref = GDT.Review.getAll().filter(function(reviewer) {
          return (reviewer.isAvailable == null) || reviewer.isAvailable(company);
        });
        for (k = 0, len = ref.length; k < len; k++) {
          r = ref[k];
          results.push(r);
        }
        return results;
      },
      getAllMessages: function() {
        return GDT.Review.messages.slice();
      },
      pickReviewers: function(count) {
        var i, k, r, ref, results;
        results = [];
        reviewers = GDT.Review.getAvailable();
        r = void 0;
        for (i = k = 0, ref = count; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          r = reviewers.pickRandom();
          results.push(r);
          reviewers.remove();
        }
        return results;
      },
      reviewLatestFor: function(company) {
        var achievedRatio, badDecisions, baseScore, bugModifier, bugsPercentage, demote, diff, difference, dp, executedDevMissions, finalScore, game, gameAudienceWeighting, generalModifier, genreText, goldenRatio, goodDecisions, highestWeighting, highestWeightingIndex, i, i1, k, key, l, len, len1, len2, len3, len4, len5, m, maxScoreFactor, maxTech, minTech, mission, mmoFactor, negativeMessages, newStaff, nonOptimalMissions, numberWorkedOnGame, optimalMissionFocus, optimalSize, p, penalty, perc, percentDifference, platformGenreMatch, positiveMessages, previousGame, q, ref, ref1, ref2, ref3, ref4, retVal, sameGenreTopic, sequelTo, smallestWeighting, smallestWeightingIndex, techLevelModifier, tempGame, tempWeighting, topScore, topScoreDecrease, topicGenreMatch, tp, trendModifier, u, underdevelopedMissions, value, weighting, x, z;
        negativeMessages = [];
        positiveMessages = [];
        mmoFactor = 1;
        game = company.currentGame;
        GDT.fire(GameManager, GDT.eventKeys.gameplay.beforeGameReview, {
          company: company,
          game: game
        });
        if (game.flags.mmo) {
          mmoFactor = 2;
        }
        sequelTo = void 0;
        if (game.sequelTo) {
          sequelTo = company.getGameById(game.sequelTo);
          if (sequelTo.releaseWeek > company.currentWeek - 40) {
            game.flags.sequelsTooClose = true;
          }
        }
        tp = game.technologyPoints;
        dp = game.designPoints;
        generalModifier = 0;
        goodDecisions = 0;
        badDecisions = 0;
        if (dp + tp >= 30) {
          goldenRatio = GameGenre.getGoldenRatio(game.genre, game.secondGenre);
          difference = dp * goldenRatio - tp;
          percentDifference = 0;
          percentDifference = tp > dp ? Math.abs(difference / tp * 100) : percentDifference = Math.abs(difference / dp * 100);
          "goldenRatio percentDifference: {0}".format(percentDifference).log();
          if (Math.abs(percentDifference) <= 25) {
            generalModifier += 0.1;
            goodDecisions += 1;
            positiveMessages.push("They achieved a great balance between technology and design.".localize());
          } else if (Math.abs(percentDifference) > 50) {
            generalModifier -= 0.1;
            if (difference < 0) {
              negativeMessages.push("They should focus more on design.".localize());
            } else {
              negativeMessages.push("They should focus more on technology.".localize());
            }
          }
        }
        executedDevMissions = game.featureLog.filter(function(m) {
          return m.missionType === "mission";
        });
        optimalMissionFocus = executedDevMissions.filter(function(m) {
          var percentage;
          percentage = m.duration / General.getGameSizeDurationFactor(game.gameSize) / General.getMultiPlatformDurationFactor(game) / (Missions.BASE_DURATION * 3);
          return Missions.getGenreWeighting(m, game) >= 0.9 && percentage >= 0.4;
        });
        if (optimalMissionFocus.length >= 2) {
          generalModifier += 0.2;
          goodDecisions += optimalMissionFocus.length;
          positiveMessages.push("Their focus on {0} served this game very well.".localize().format(optimalMissionFocus.map(function(m) {
            return Missions.getMissionWithId(m.id);
          }).pickRandom().name));
        } else if (optimalMissionFocus.length === 1) {
          generalModifier += 0.1;
          goodDecisions += 1;
        } else {
          generalModifier -= 0.15 * mmoFactor;
        }
        nonOptimalMissions = executedDevMissions.filter(function(m) {
          var percentage;
          percentage = m.duration / General.getGameSizeDurationFactor(game.gameSize) / General.getMultiPlatformDurationFactor(game) / (Missions.BASE_DURATION * 3);
          return Missions.getGenreWeighting(m, game) < 0.8 && percentage >= 0.4;
        });
        if (nonOptimalMissions.length === 2) {
          mission = Missions.getMissionWithId(nonOptimalMissions.pickRandom().id);
          generalModifier -= 0.2 * mmoFactor;
          badDecisions += nonOptimalMissions.length;
          negativeMessages.push("Their focus on {0} is a bit odd.".localize().format(mission.name));
        } else if (nonOptimalMissions.length === 1) {
          generalModifier -= 0.1 * mmoFactor;
          badDecisions += 1;
        }
        underdevelopedMissions = executedDevMissions.filter(function(m) {
          var percentage;
          percentage = m.duration / General.getGameSizeDurationFactor(game.gameSize) / General.getMultiPlatformDurationFactor(game) / (Missions.BASE_DURATION * 3);
          return Missions.getGenreWeighting(m, game) >= 0.9 && percentage <= 0.2;
        });
        for (k = 0, len = underdevelopedMissions.length; k < len; k++) {
          m = underdevelopedMissions[k];
          mission = Missions.getMissionWithId(m.id);
          generalModifier -= 0.15 * mmoFactor;
          badDecisions += 1;
          negativeMessages.push("They shouldn't forget about {0}.".localize().format(mission.name));
        }
        value = (dp + tp) / 2 / General.getGameSizePointsFactor(game);
        topicGenreMatch = GameGenre.getGenreWeighting(game.topic.genreWeightings, game.genre, game.secondGenre);
        if (topicGenreMatch <= 0.6) {
          negativeMessages.push("{0} and {1} is a terrible combination.".localize().format(game.topic.name, game.getGenreDisplayName()));
        } else if (topicGenreMatch === 1) {
          positiveMessages.push("{0} and {1} is a great combination.".localize().format(game.topic.name, game.getGenreDisplayName()));
        }
        genreText = game.genre.name;
        if (game.secondGenre) {
          genreText += "-" + game.secondGenre.name;
        }
        previousGame = company.gameLog.last();
        if (previousGame && (!game.flags.isExtensionPack && (previousGame.genre === game.genre && (previousGame.secondGenre === game.secondGenre && previousGame.topic === game.topic)))) {
          penalty = -0.4;
          badDecisions += 1;
          sameGenreTopic = "Another {0}/{1} game?".localize().format(genreText, game.topic.name);
          negativeMessages.push(sameGenreTopic);
          game.flags.sameGenreTopic = true;
          "repeat genre/topic penalty: {0}:".format(penalty).log();
          generalModifier += penalty;
        }
        platformGenreMatch = Platforms.getGenreWeighting(game.platforms, game.genre, game.secondGenre);
        if (platformGenreMatch <= 0.6) {
          smallestWeighting = Platforms.getNormGenreWeighting(game.platforms[0].genreWeightings, game.genre, game.secondGenre);
          smallestWeightingIndex = 0;
          ref = game.platforms;
          for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
            p = ref[i];
            tempWeighting = Platforms.getNormGenreWeighting(p.genreWeightings, game.genre, game.secondGenre);
            if (tempWeighting < smallestWeighting) {
              smallestWeightingIndex = i;
            }
          }
          negativeMessages.push("{0} games don't work well on {1}.".localize().format(genreText, game.platforms[smallestWeightingIndex].name));
        } else if (platformGenreMatch > 1) {
          highestWeighting = Platforms.getNormGenreWeighting(game.platforms[0].genreWeightings, game.genre, game.secondGenre);
          highestWeightingIndex = 0;
          ref1 = game.platforms;
          for (i = q = 0, len2 = ref1.length; q < len2; i = ++q) {
            p = ref1[i];
            tempWeighting = Platforms.getNormGenreWeighting(p.genreWeightings, game.genre, game.secondGenre);
            if (tempWeighting > highestWeighting) {
              highestWeightingIndex = i;
            }
          }
          positiveMessages.push("{0} games work well on {1}.".localize().format(genreText, game.platforms[highestWeightingIndex].name));
        }
        gameAudienceWeighting = General.getAudienceWeighting(game.topic.audienceWeightings, game.targetAudience);
        if (gameAudienceWeighting <= 0.6) {
          negativeMessages.push("{0} is a horrible topic for {1} audiences.".localize().format(game.topic.name, General.getAudienceLabel(game.targetAudience)));
        }
        if (game.flags.sequelsTooClose) {
          generalModifier -= 0.4;
          badDecisions += 1;
          if (game.flags.isExtensionPack) {
            negativeMessages.push("Already a expansion pack?".localize());
          } else {
            negativeMessages.push("Didn't we just play {0} recently?".localize().format(sequelTo.title));
          }
        }
        if (game.flags.usesSameEngineAsSequel && !game.flags.isExtensionPack) {
          generalModifier -= 0.1;
          badDecisions += 1;
        } else if (game.flags.hasBetterEngineThanSequel) {
          generalModifier += 0.2;
          goodDecisions += 1;
        }
        if (game.flags.mmo) {
          weighting = GameGenre.getGenreWeighting(game.topic.genreWeightings, game.genre, game.secondGenre);
          if (weighting < 1) {
            generalModifier -= 0.15;
          }
        }
        bugModifier = 1;
        if (game.bugs > 0) {
          perc = 100 / (game.technologyPoints + game.designPoints);
          bugsPercentage = (game.bugs * perc).clamp(0, 100);
          bugModifier = 1 - 0.8 * (bugsPercentage / 100);
          if (bugModifier <= 0.6) {
            negativeMessages.push("Riddled with bugs.".localize());
          } else if (bugModifier < 0.9) {
            negativeMessages.push("Too many bugs.".localize());
          }
        }
        techLevelModifier = 1;
        if (game.platforms.length > 1) {
          maxTech = game.platforms[0].techLevel;
          if (game.platforms[0].id === "PC") {
            maxTech = game.platforms[1].techLevel;
          }
          minTech = maxTech;
          ref2 = game.platforms;
          for (u = 0, len3 = ref2.length; u < len3; u++) {
            p = ref2[u];
            if (!(p.id !== "PC")) {
              continue;
            }
            maxTech = Math.max(maxTech, p.techLevel);
            minTech = Math.min(minTech, p.techLevel);
          }
          techLevelModifier -= (maxTech - minTech) / 20;
        }
        value += value * generalModifier;
        value *= platformGenreMatch;
        value *= gameAudienceWeighting;
        value *= bugModifier;
        value *= techLevelModifier;
        trendModifier = GameTrends.getCurrentTrendFactor(game);
        game.flags.trendModifier = trendModifier;
        value *= trendModifier;
        topScore = getCurrentTopScoreBarrier(company);
        achievedRatio = value / topScore;
        if (achievedRatio >= 0.6 && (gameAudienceWeighting <= 0.7 || topicGenreMatch <= 0.7)) {
          achievedRatio = 0.6 + (achievedRatio - 0.6) / 2;
        }
        if (achievedRatio > 0.7) {
          ref3 = game.platforms;
          for (x = 0, len4 = ref3.length; x < len4; x++) {
            p = ref3[x];
            if (Platforms.getPlatformsAudienceWeighting(p.audienceWeightings, game.targetAudience) <= 0.8) {
              value *= Platforms.getPlatformsAudienceWeighting(p.audienceWeightings, game.targetAudience, true);
              achievedRatio = value / topScore;
              break;
            }
          }
        }
        "achieved {0} / top game {1} = {2}".format(value, Reviews.topScore, achievedRatio).log();
        demote = false;
        finalScore = (achievedRatio * 10).clamp(1, 10);
        game.flags.teamContribution = 0;
        company.staff.forEach(function(s) {
          if (s.flags.gamesContributed < 1) {
            return game.flags.teamContribution(elsegame.flags.teamContribution += game.getRatioWorked(s));
          }
        });
        game.flags.teamContribution /= company.staff.length;
        if (company.lastTopScore > 0 && finalScore <= 5.2 - 0.2 * game.platforms.length) {
          if (goodDecisions > 0 && (goodDecisions > badDecisions && game.flags.teamContribution >= 0.8)) {
            baseScore = 6;
            numberWorkedOnGame = 0;
            for (key in game.flags.staffContribution) {
              if (!game.flags.staffContribution.hasOwnProperty(key)) {
                continue;
              }
              numberWorkedOnGame++;
            }
            optimalSize = General.getOptimalTeamSize(game);
            diff = Math.abs(optimalSize - numberWorkedOnGame);
            if (diff > 1) {
              baseScore -= diff - 1;
            }
            newStaff = Reviews.getNewStaff(game);
            if (newStaff) {
              if (newStaff.length > 0) {
                baseScore -= newStaff.length / 2;
              }
            }
            baseScore += goodDecisions / 2 - badDecisions / 2;
            if (bugModifier < 0.9) {
              baseScore -= 0.5;
            } else if (bugModifier <= 0.6) {
              baseScore -= 1;
            }
            if (platformGenreMatch <= 0.8) {
              baseScore -= 1 - platformGenreMatch;
            }
            if (gameAudienceWeighting <= 0.8) {
              baseScore -= 1 - gameAudienceWeighting;
            }
            if (game.platforms.length > 1) {
              maxTech = game.platforms[0].techLevel;
              if (game.platforms[0].id === "PC") {
                maxTech = game.platforms[1].techLevel;
              }
              minTech = maxTech;
              ref4 = game.platforms;
              for (z = 0, len5 = ref4.length; z < len5; z++) {
                p = ref4[z];
                if (!(p.id !== "PC")) {
                  continue;
                }
                maxTech = Math.max(maxTech, p.techLevel);
                minTech = Math.min(minTech, p.techLevel);
              }
              baseScore -= (maxTech - minTech) / 0.5;
            }
            baseScore -= company.getRandom();
            baseScore = Math.min(baseScore, 7.7);
            if (finalScore < baseScore) {
              game.flags.scoreWithoutBrackets = finalScore;
              finalScore = baseScore;
            }
            if (company.gameLog.length > 3) {
              topScoreDecrease = true;
              for (i = i1 = 1; i1 <= 3; i = ++i1) {
                tempGame = company.gameLog[company.gameLog.length - i];
                if (tempGame.score > 5.2 - 0.2 * tempGame.platforms.length && !tempGame.flags.scoreWithoutBrackets) {
                  topScoreDecrease = false;
                  break;
                }
              }
              if (topScoreDecrease) {
                company.lastTopScore = value;
                game.flags.topScoreDecreased = true;
              }
            }
          }
        }
        maxScoreFactor = getMaxScorePossible(company, game) / 10;
        if (game.gameSize !== "medium" && (game.gameSize !== "small" && maxScoreFactor < 1)) {
          negativeMessages.push("Technology is not state of the art.".localize());
        }
        finalScore *= maxScoreFactor;
        if (finalScore >= 9) {
          if (generalModifier < 0.1 && company.getRandom() < 0.8) {
            demote = true;
          } else {
            newStaff = Reviews.getNewStaff(game);
            if (newStaff.length > 0) {
              demote = true;
              game.flags.newStaffIds = newStaff.map(function(staff) {
                return staff.id;
              });
            }
          }
          if (demote) {
            if (game.flags.newStaffIds && game.flags.newStaffIds.length > 0) {
              finalScore = 8.15 + 0.95 / game.flags.newStaffIds.length * company.getRandom();
            } else {
              finalScore = 8.45 + 0.65 * company.getRandom();
            }
            if (company.getRandom() < 0.1) {
              finalScore = 9 + 0.25 * company.getRandom();
            }
            updateTopScore(company, value);
          }
        }
        if (sequelTo) {
          if (finalScore <= 4) {
            if (game.flags.isExtensionPack) {
              negativeMessages.push("What a horrible expansion pack!".localize());
            } else {
              negativeMessages.push("What a horrible sequel!".localize());
            }
          } else if (finalScore <= 7) {
            if (game.flags.isExtensionPack) {
              negativeMessages.push("Average expansion pack.".localize());
            } else {
              negativeMessages.push("Average sequel.".localize());
            }
          } else {
            if (game.flags.isExtensionPack) {
              positiveMessages.push("Great expansion pack.".localize());
            } else {
              positiveMessages.push("Great sequel!".localize());
            }
          }
        }
        if (company.topScoreAchievements < 2 && company.getCurrentDate().year < 4) {
          if (finalScore === 10) {
            finalScore -= 1.05 + 0.45 * company.getRandom();
            setTopScoreAchievement(company, value);
          } else if (finalScore >= 9) {
            finalScore -= 1.05 + 0.2 * company.getRandom();
            setTopScoreAchievement(company, value);
          } else if (finalScore > 8.5) {
            finalScore -= 0.4 + 0.2 * company.getRandom();
          }
        }
        if (finalScore >= 9) {
          setTopScoreAchievement(company, value);
        }
        if (finalScore !== 10 && (game.flags.topScore && company.topScoreAchievements === 3)) {
          finalScore = 10;
        }
        game.score = finalScore;
        "final score: {0}".format(finalScore).log();
        if (sequelTo) {
          if (company.getRandom() <= 0.5 || !company.gameLog.some(function(g) {
            return g.sequelTo != null;
          })) {
            if (game.flags.isExtensionPack) {
              Media.createExtensionPackStory(company, game);
            } else {
              Media.createSequelStory(company, game);
            }
          }
        }
        retVal = Reviews.getReviews(game, finalScore, positiveMessages, negativeMessages);
        GDT.fire(GameManager, GDT.eventKeys.gameplay.afterGameReview, {
          company: company,
          game: game,
          reviews: retVal
        });
        return retVal;
      },
      generate: function(game, finalScore, positiveMessages, negativeMessages) {
        var intScore, k, len, message, reviewer, reviews, score, scoreVariation, scores, usedMessages, variation;
        intScore = Math.floor(finalScore).clamp(1, 10);
        if (finalScore >= 9.5) {
          intScore = 10;
        }
        reviewers = GDT.Reviewer.pickReviewers(4);
        reviews = [];
        usedMessages = [];
        scores = [];
        variation = 1;
        for (k = 0, len = reviewers.length; k < len; k++) {
          reviewer = reviewers[k];
          if (intScore === 5 || intScore === 6) {
            variation = GameManager.company.getRandom() < 0.05 ? 2 : 1;
          }
          scoreVariation = Math.randomSign() === 1 ? 0 : variation * Math.randomSign();
          score = (intScore + scoreVariation).clamp(1, 10);
          if (score === 10 && (scores.length === 3 && scores.average() === 10)) {
            if (!game.flags.psEnabled) {
              if (Math.floor(finalScore) < 10 || GameManager.company.getRandom() < 0.8) {
                score--;
              }
            } else if (Math.floor(finalScore) === 10 && GameManager.company.getRandom() < 0.4) {
              score++;
            }
          }
          message = reviewer.getMessage != null ? reviewer.getMessage(game, finalScore) : void 0;
          if (message === void 0) {
            do {
							if (GameManager.company.getRandom() <= 0.2)
								if (scoreVariation >= 0 && (score > 2 && positiveMessages.length != 0))
									message = positiveMessages.pickRandom();
								else {
									if (scoreVariation < 0 && (score < 6 && negativeMessages != 0))
										message = negativeMessages.pickRandom()
								}
							else
								message = undefined;
							if (!message)
								message = Reviews.getGenericReviewMessage(game, score)
						} while (usedMessages.weakIndexOf(message) != -1);
          }
          usedMessages.push(message);
          scores.push(score);
          reviews.push({
            score: score,
            message: message,
            reviewerName: reviewer.name
          });
        }
        return reviews;
      },
      getById: function(id) {
        return GDT.Reviewer.getAll().first(function(r) {
          return r.id === id;
        });
      },
      getMessageById: function(id) {
        return GDT.Reviewer.getAllMessages.first(function(m) {
          return m.id === id;
        });
      }
    };
    return GDT.Reviewer.reviewers.forEach(function(e, i) {
      return GDT.Reviewer.reviewers[i] = {
        name: e,
        id: e.replace(' ', '')
      };
    });
  })();
  GDT.Event = {
    events: DecisionNotifications.getAllNotificationsObjects(),
    getAll: function() {
      return GDT.Event.slice();
    },
    getAvailable: function(company) {
      var events;
      return events = GDT.Event.getAll().filter(function(e) {
        return !e.isRandom && GDT.Event.isAvailable(e);
      });
    },
    getRandom: function(company) {
      var candidates, event, spawnEvent;
      spawnEvent = company.flags.nextRandomEvent && company.flags.nextRandomEvent <= GameManager.gameTime;
      if (!company.flags.nextRandomEvent) {
        company.flags.nextRandomEvent = (48 + 24 * company.getRandom()) * GameManager.SECONDS_PER_WEEK * 1e3;
      }
      if (spawnEvent) {
        company.flags.nextRandomEvent = GameManager.gameTime + (36 + 48 * company.getRandom()) * GameManager.SECONDS_PER_WEEK * 1e3;
        candidates = GDT.Event.getAll().filter(function(e) {
          return e.isRandomEvent && (company.flags.lastRandomEventId !== e.id && GDT.Event.isAvailable(company, e));
        });
        event = candidates.pickRandom();
        if (!event) {
          return [];
        }
        company.flags.lastRandomEventId = event.id;
        return event;
      }
      return [];
    },
    trigger: function(company, event) {
      if (!company.eventTriggerCounts[event.id]) {
        company.eventTriggerCounts[event.id] = 1;
      } else {
        company.eventTriggerCounts[event.id]++;
      }
      if (event.notification) {
        return event.notification;
      } else {
        return event.getNotification(company);
      }
    },
    isAvailable: function(company, event) {
      var count;
      if (event.date) {
        if (Math.floor(company.currentWeek) < General.getWeekFromDateString(event.date, event.ignoreGameLengthModifier)) {
          return false;
        }
      }
      if (event.maxTriggers || event.date) {
        count = GameManager.company.eventTriggerCounts[event.id];
        if (count && count >= (event.date ? 1 : event.maxTriggers)) {
          return false;
        }
      }
      return event.date || event.trigger && event.trigger(company);
    },
    getById: function(id) {
      return GDT.Event.getAll().first(function(e) {
        return e.id === id;
      });
    }
  };
  GDT.Notification = {
    queue: [],
    getNotification: function(company, event) {
      if (event.notification) {
        return event.notification;
      } else {
        return event.getNotification(company);
      }
    },
    getNewNotifications: function(company) {
      var results;
      results = GDT.Event.getAvailable(company).map(function(e) {
        return GDT.Event.trigger(company, e);
      });
      if (results.length === 0) {
        results = [GDT.Event.trigger(company, GDT.Event.getRandom(company))];
      }
      return results;
    }
  };
  DecisionNotifications.getNewNotifications = GDT.Notification.getNewNotifications;
  GDT.ModSupport = (function() {
    var ModSupport, oldLoad;
    ModSupport = {};
    oldLoad = ModSupport.loadMod;
    ModSupport.loadMod = function(enableMods, i) {
      SDP.Util.Logger.formatter = SDP.Util.Logger.printf;
      return oldLoad(enableMods, i);
    };
    return ModSupport;
  })();
  ModSupport.loadMod = GDT.ModSupport.loadMod;
  return GDT;
})();

(function() {
  SDP.ULWrapper = {};
  if (String.prototype.endsWith == null) {
    String.prototype.endsWith = function(a) {
      return this.substr(this.length - a.length) === a;
    };
  }
  if (String.prototype.startsWith == null) {
    String.prototype.startsWith = function(a) {
      return this.substr(0, a.length) === a;
    };
  }
  if (Number.prototype.truncateDecimals == null) {
    Number.prototype.truncateDecimals = function(a) {
      var b;
      b = this - Math.pow(10, -a) / 2;
      b += b / Math.pow(2, 53);
      return b.toFixed(a);
    };
  }
  SDP.ULWrapper.Logger = (function() {
    var Loggger;
    Loggger = {
      enabled: true
    };
    Logger.log = function(e, c) {
      if (!Logger.enabled) {
        return;
      }
      if (c == null) {
        return SDP.Util.Logger.debug(e);
      } else {
        return SDP.Util.Logger.error(e + "\n" + c.message);
      }
    };
    return Logger;
  })();
  SDP.ULWrapper.Contracts = (function() {
    var Contracts;
    Contracts = {};
    return Contracts;
  })();
  SDP.ULWrapper.Publishers = (function() {
    var Publishers;
    Publishers = {};
    return Publishers;
  })();
  return SDP.ULWrapper.Research = (function() {
    var Research;
    Research = {};
    return Research;
  })();
})();


/*
Adds company tracking system

Companies.createCompany = (item) ->
	if item.constructor is String then item = {name: item}
	if not item.id? and item.name? then item.id = name.replace(/\s/g,"")
	item.platforms = []
	item.platforms.push(p) for p of Platforms.allPlatforms when p.company is item.name
	item.sort = ->
		item.platforms.sort (a,b) ->
			General.getWeekFromDateString(a.published) - General.getWeekFromDateString(b.published)
	item.addPlatform = (platform) ->
		return if item.platforms.find((val) -> platform.id is val.id)?
		platform.company = item.name
		SDP.GDT.addPlatform(platform)
		item.platforms.push(platform)
		item.sort()
		platform
	item.sort()
	item
Companies.createVanillaCompany = (item) ->
	Companies.createCompany(item)
	item.isVanilla = true
	item
Companies.vanillaCompanies = [
	Companies.createVanillaCompany("Micronoft")
	Companies.createVanillaCompany("Grapple")
	Companies.createVanillaCompany("Govodore")
	Companies.createVanillaCompany("Ninvento")
	Companies.createVanillaCompany("Vena")
	Companies.createVanillaCompany("Vonny")
	Companies.createVanillaCompany("KickIT")
]
Companies.moddedCompanies = []
Companies.getAllCompanies = ->
	c = Companies.vanillaCompanies.filter (val) -> val.id?
	c.addRange(Companies.moddedCompanies.filter (val) -> val.id?)
	for comp of c
		comp.sort = ->
			comp.platforms.sort (a,b) ->
				General.getWeekFromDateString(a.published) - General.getWeekFromDateString(b.published)
		comp.sort()
	c.sort (a,b) ->
		General.getWeekFromDateString(a.platforms[0].published) - General.getWeekFromDateString(b.platforms[0].published)
	c
Companies.getAvailableCompanies = (company) ->
	week = Math.floor(company.currentWeek)
	Companies.getAllCompanies().filter (val) ->
		General.getWeekFromDateString(val.platforms[0].published) <= week
 */

GDT.on(GDT.eventKeys.saves.loaded, function() {
  var i, k, len, ref;
  ref = SDP.GDT.Notification.queue;
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    GameManager.company.notifications.push(i);
  }
  return SDP.GDT.Notification.queue = [];
});

GDT.on(GDT.eventKeys.saves.newGame, function() {
  var i, k, len, ref;
  ref = SDP.GDT.Notification.queue;
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    GameManager.company.notifications.push(i);
  }
  return SDP.GDT.Notification.queue = [];
});


/*
Modifies GDT classes to make all objects indepedent of GameManager.company
 */

(function() {
  var Game, oldGame, oldGameConst;
  oldGameConst = Game;
  oldGame = oldGameConst.prototype;
  Game = function(company) {
    oldGameConst.call(this, company);
    this.company = company;
  };
  return Game.prototype = oldGame;
})();

(function() {
  var Character, oldChar, oldCharConst, oldSave;
  oldCharConst = Character;
  oldChar = oldCharConst.prototype;
  Character = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    oldCharConst.call(this, args);
    this.company = args[0].company || SDP.GDT.Company.getAllCompanies()[args[0].uid] || SDP.GDT.Company.getClientCompany();
  };
  Character.prototype = oldChar;
  oldSave = Character.prototype.save;
  return Character.prototype.save = function() {
    return oldSave.call(this).companyId = this.company.uid;
  };
})();

(function() {
  var Company, oldCompany, oldCompanyConst;
  oldCompanyConst = Company;
  oldCompany = oldCompanyConst.prototype;
  Company = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    oldCompanyConst.call(this, args);
    SDP.GDT.Company.addCompany(this);
  };
  return Company.prototype = oldCompany;
})();


/*
Allow adding famous people and adding custom applicant algorithims

JobApplicants.moddedFamous = []
JobApplicants.moddedAlgorithims = []
JobApplicants.getRandomMale = (random) ->
	results = []
	JobApplicants.moddedAlgorithims.forEach (val) ->
		results.push(val.apply(random)) if val.forMale
	results.pickRandom(random)

JobApplicants.getRandomFemale = (random) ->
	results = []
	JobApplicants.moddedAlgorithims.forEach (val) ->
		results.push(val.apply(random)) if not val.forMale
	results.pickRandom(random)

JobApplicants.getFamousMale = (tech, design, random) ->
	results = []
	JobApplicants.moddedFamous.forEach (val) ->
		results.push(val.apply(random, tech, design)) if val.forMale
	results.pickRandom(random)

JobApplicants.getFamousFemale = (tech, design, random) ->
	results = []
	JobApplicants.moddedFamous.forEach (val) ->
		results.push(val.apply(random, tech, design)) if not val.forMale
	results.pickRandom(random)

JobApplicants.searchTests =
	[
		{
			id : "ComplexAlgorithms"
			name : "Complex Algorithms".localize()
			minT : 0.6
		}
		{
			id : "GameDemo"
			name : "Game Demo".localize()
			minD : 0.3,
			minT : 0.3
		}
		{
			id : "Showreel"
			name : "Showreel".localize()
			minD : 0.6
		}
	]
UI.__olgGenerateJobApplicants = UI._generateJobApplicants
UI._generateJobApplicants = ->
	oldApplicants = UI.__olgGenerateJobApplicants()
	settings = GameManager.uiSettings["findStaffData"]
	settings = {ratio : 0.1, tests : []} if not settings
	settings.seed = Math.floor(GameManager.company.getRandom() * 65535) if not settings.seed
	ratio = settings.ratio
	test = JobApplicants.searchTests.first (t) -> t.id is settings.tests.first()
	company = GameManager.company
	random = new MersenneTwister(settings.seed)
	newApplicants = []
	count = Math.floor(2 + 3 * (ratio + 0.2).clamp(0, 1))
	rerolls = 0
	maxRerolls = 2
	maxBonus = if company.currentLevel is 4 then 4 / 5 else 2 / 5
	takenNames = GameManager.company.staff.map (s) -> s.name
	for i in [0...count]
		qBonusFactor = ratio / 3 + (1 - ratio / 3) * random.random()
		maxBonus += 1 / 5 if random.random() >= 0.95
		q = 1 / 5 + maxBonus * qBonusFactor
		level = Math.floor(q * 5).clamp(1,5)
		maxD = 1
		minD = 0
		if test
			maxD -= test.minT if test.minT
			if test.minD
				minD = test.minD
				maxD -= minD
		baseValue = 200 * level
		d = baseValue * minD + baseValue * maxD * random.random()
		t = baseValue - d
		rBonusFactor = random.random()
		r = 1 / 5 + maxBonus * rBonusFactor
		sBonusFactor = random.random()
		s = 1 / 5 + maxBonus * sBonusFactor
		goodRoll = sBonusFactor > 0.5 and (qBonusFactor > 0.5 and rBonusFactor > 0.5)
		if not goodRoll and (rerolls < maxRerolls and random.random() <= (ratio + 0.1).clamp(0, 0.7))
			i--
			rerolls++
			continue
		rerolls = 0
		isFamous = false
		sex = "male"
		loop
			sex = "male"
			if goodRoll
				name = JobApplicants.getFamousMale(t, d, random) if (random.random() > 0.15)
				else
					name = JobApplicants.getFamousFemale(t, d, random)
					sex = "female"
				isFamous = true
			else
				name = JobApplicants.getRandomMale(random) if random.random() > 0.25
				else
					name = JobApplicants.getRandomFemale(random)
					sex = "female"
				isFamous = false
		break unless takenNames.indexOf(name) != -1
		takenNames.push(name)
		salary = Character.BASE_SALARY_PER_LEVEL * level
		salary += salary * 0.2 * random.random() * random.randomSign()
		salary = Math.floor(salary/1e3) * 1e3
		newApplicants.push {
			name : name,
			qualityFactor : q,
			technologyFactor : t / 500,
			designFactor : d / 500,
			researchFactor : r,
			speedFactor : s,
			salary : salary,
			isFamous : isFamous,
			sex : sex
		}
	GDT.fire GameManager, GDT.eventKeys.gameplay.staffApplicantsGenerated, {
		newApplicants : newApplicants
		settings : settings
		rng : random
	}
	applicants = []
	for i in [0...count]
		if random.random() >= 0.5
			a = newApplicants.pickRandom(random)
			applicants.push(a)
			newApplicants.remove(a)
		else
			a = oldApplicants.pickRandom(random)
			applicants.push(a)
			oldApplicants.remove(a)
	return applicants
 */
